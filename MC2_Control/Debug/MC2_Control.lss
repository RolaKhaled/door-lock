
MC2_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003186  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00003186  0000321a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800080  00800080  0000323a  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  0000323c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000141b  00000000  00000000  00006488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000078a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000079e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000979c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a687  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b434  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b821  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
#include"buzzer.h"
#include"gpio.h"
#include<avr/io.h>

void Buzzer_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*set buzzer pin as output*/
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <GPIO_setupPinDirection>
	/*Turn off buzzer at the beginning*/
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:

void Buzzer_on(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

void Buzzer_off(void){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:
void APP_savePasswordInEEPROM(void);
uint8 APP_confirmPassword2(void);
void APP_setTimer1CallBackFunction(void);
void APP_Buzzer(void);

int main(void){
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	c8 57       	subi	r28, 0x78	; 120
     ba6:	d0 40       	sbci	r29, 0x00	; 0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61

	// /SREG|=(1<<7) ;

	Timer1_Config timer1_config_ptr={0,0,FCPU_256,NORMAL};
     bb2:	ce 01       	movw	r24, r28
     bb4:	8d 59       	subi	r24, 0x9D	; 157
     bb6:	9f 4f       	sbci	r25, 0xFF	; 255
     bb8:	e1 96       	adiw	r28, 0x31	; 49
     bba:	9f af       	std	Y+63, r25	; 0x3f
     bbc:	8e af       	std	Y+62, r24	; 0x3e
     bbe:	e1 97       	sbiw	r28, 0x31	; 49
     bc0:	8a e7       	ldi	r24, 0x7A	; 122
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	e3 96       	adiw	r28, 0x33	; 51
     bc6:	9f af       	std	Y+63, r25	; 0x3f
     bc8:	8e af       	std	Y+62, r24	; 0x3e
     bca:	e3 97       	sbiw	r28, 0x33	; 51
     bcc:	96 e0       	ldi	r25, 0x06	; 6
     bce:	e4 96       	adiw	r28, 0x34	; 52
     bd0:	9f af       	std	Y+63, r25	; 0x3f
     bd2:	e4 97       	sbiw	r28, 0x34	; 52
     bd4:	e3 96       	adiw	r28, 0x33	; 51
     bd6:	ee ad       	ldd	r30, Y+62	; 0x3e
     bd8:	ff ad       	ldd	r31, Y+63	; 0x3f
     bda:	e3 97       	sbiw	r28, 0x33	; 51
     bdc:	00 80       	ld	r0, Z
     bde:	e3 96       	adiw	r28, 0x33	; 51
     be0:	8e ad       	ldd	r24, Y+62	; 0x3e
     be2:	9f ad       	ldd	r25, Y+63	; 0x3f
     be4:	e3 97       	sbiw	r28, 0x33	; 51
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	e3 96       	adiw	r28, 0x33	; 51
     bea:	9f af       	std	Y+63, r25	; 0x3f
     bec:	8e af       	std	Y+62, r24	; 0x3e
     bee:	e3 97       	sbiw	r28, 0x33	; 51
     bf0:	e1 96       	adiw	r28, 0x31	; 49
     bf2:	ee ad       	ldd	r30, Y+62	; 0x3e
     bf4:	ff ad       	ldd	r31, Y+63	; 0x3f
     bf6:	e1 97       	sbiw	r28, 0x31	; 49
     bf8:	00 82       	st	Z, r0
     bfa:	e1 96       	adiw	r28, 0x31	; 49
     bfc:	8e ad       	ldd	r24, Y+62	; 0x3e
     bfe:	9f ad       	ldd	r25, Y+63	; 0x3f
     c00:	e1 97       	sbiw	r28, 0x31	; 49
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	e1 96       	adiw	r28, 0x31	; 49
     c06:	9f af       	std	Y+63, r25	; 0x3f
     c08:	8e af       	std	Y+62, r24	; 0x3e
     c0a:	e1 97       	sbiw	r28, 0x31	; 49
     c0c:	e4 96       	adiw	r28, 0x34	; 52
     c0e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c10:	e4 97       	sbiw	r28, 0x34	; 52
     c12:	91 50       	subi	r25, 0x01	; 1
     c14:	e4 96       	adiw	r28, 0x34	; 52
     c16:	9f af       	std	Y+63, r25	; 0x3f
     c18:	e4 97       	sbiw	r28, 0x34	; 52
     c1a:	e4 96       	adiw	r28, 0x34	; 52
     c1c:	ef ad       	ldd	r30, Y+63	; 0x3f
     c1e:	e4 97       	sbiw	r28, 0x34	; 52
     c20:	ee 23       	and	r30, r30
     c22:	c1 f6       	brne	.-80     	; 0xbd4 <main+0x3c>
	SREG|=(1<<7); // THIS WAASS TRANSALATED FROM THE FIRST MAIN LINE
     c24:	af e5       	ldi	r26, 0x5F	; 95
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	ef e5       	ldi	r30, 0x5F	; 95
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	80 68       	ori	r24, 0x80	; 128
     c30:	8c 93       	st	X, r24
	I2C_Config i2c_config_ptr={1,400000}; /*slave address of MC2 is 1*/
     c32:	ce 01       	movw	r24, r28
     c34:	87 59       	subi	r24, 0x97	; 151
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	e6 96       	adiw	r28, 0x36	; 54
     c3a:	9f af       	std	Y+63, r25	; 0x3f
     c3c:	8e af       	std	Y+62, r24	; 0x3e
     c3e:	e6 97       	sbiw	r28, 0x36	; 54
     c40:	84 e7       	ldi	r24, 0x74	; 116
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	e8 96       	adiw	r28, 0x38	; 56
     c46:	9f af       	std	Y+63, r25	; 0x3f
     c48:	8e af       	std	Y+62, r24	; 0x3e
     c4a:	e8 97       	sbiw	r28, 0x38	; 56
     c4c:	96 e0       	ldi	r25, 0x06	; 6
     c4e:	e9 96       	adiw	r28, 0x39	; 57
     c50:	9f af       	std	Y+63, r25	; 0x3f
     c52:	e9 97       	sbiw	r28, 0x39	; 57
     c54:	e8 96       	adiw	r28, 0x38	; 56
     c56:	ee ad       	ldd	r30, Y+62	; 0x3e
     c58:	ff ad       	ldd	r31, Y+63	; 0x3f
     c5a:	e8 97       	sbiw	r28, 0x38	; 56
     c5c:	00 80       	ld	r0, Z
     c5e:	e8 96       	adiw	r28, 0x38	; 56
     c60:	8e ad       	ldd	r24, Y+62	; 0x3e
     c62:	9f ad       	ldd	r25, Y+63	; 0x3f
     c64:	e8 97       	sbiw	r28, 0x38	; 56
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	e8 96       	adiw	r28, 0x38	; 56
     c6a:	9f af       	std	Y+63, r25	; 0x3f
     c6c:	8e af       	std	Y+62, r24	; 0x3e
     c6e:	e8 97       	sbiw	r28, 0x38	; 56
     c70:	e6 96       	adiw	r28, 0x36	; 54
     c72:	ee ad       	ldd	r30, Y+62	; 0x3e
     c74:	ff ad       	ldd	r31, Y+63	; 0x3f
     c76:	e6 97       	sbiw	r28, 0x36	; 54
     c78:	00 82       	st	Z, r0
     c7a:	e6 96       	adiw	r28, 0x36	; 54
     c7c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c7e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c80:	e6 97       	sbiw	r28, 0x36	; 54
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	e6 96       	adiw	r28, 0x36	; 54
     c86:	9f af       	std	Y+63, r25	; 0x3f
     c88:	8e af       	std	Y+62, r24	; 0x3e
     c8a:	e6 97       	sbiw	r28, 0x36	; 54
     c8c:	e9 96       	adiw	r28, 0x39	; 57
     c8e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c90:	e9 97       	sbiw	r28, 0x39	; 57
     c92:	91 50       	subi	r25, 0x01	; 1
     c94:	e9 96       	adiw	r28, 0x39	; 57
     c96:	9f af       	std	Y+63, r25	; 0x3f
     c98:	e9 97       	sbiw	r28, 0x39	; 57
     c9a:	e9 96       	adiw	r28, 0x39	; 57
     c9c:	ef ad       	ldd	r30, Y+63	; 0x3f
     c9e:	e9 97       	sbiw	r28, 0x39	; 57
     ca0:	ee 23       	and	r30, r30
     ca2:	c1 f6       	brne	.-80     	; 0xc54 <main+0xbc>

	UART_init(&uart_config_ptr);
     ca4:	8d e6       	ldi	r24, 0x6D	; 109
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <UART_init>
	Timer1_init(&timer1_config_ptr);
     cac:	ce 01       	movw	r24, r28
     cae:	8d 59       	subi	r24, 0x9D	; 157
     cb0:	9f 4f       	sbci	r25, 0xFF	; 255
     cb2:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <Timer1_init>
	Timer1_setCallBack(APP_setTimer1CallBackFunction);
     cb6:	86 e0       	ldi	r24, 0x06	; 6
     cb8:	9c e0       	ldi	r25, 0x0C	; 12
     cba:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <Timer1_setCallBack>
	I2C_init(&i2c_config_ptr);
     cbe:	ce 01       	movw	r24, r28
     cc0:	87 59       	subi	r24, 0x97	; 151
     cc2:	9f 4f       	sbci	r25, 0xFF	; 255
     cc4:	0e 94 44 10 	call	0x2088	; 0x2088 <I2C_init>
	Buzzer_init();
     cc8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	DCMotor_init();
     ccc:	0e 94 12 0c 	call	0x1824	; 0x1824 <DCMotor_init>
	LCD_init();
     cd0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <LCD_init>
     cd4:	04 c0       	rjmp	.+8      	; 0xcde <main+0x146>

	while(1){
		while(g_sendback==0){
			APP_receivePassword();
     cd6:	0e 94 be 0a 	call	0x157c	; 0x157c <APP_receivePassword>
			APP_savePasswordInEEPROM();
     cda:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <APP_savePasswordInEEPROM>
	Buzzer_init();
	DCMotor_init();
	LCD_init();

	while(1){
		while(g_sendback==0){
     cde:	80 91 81 00 	lds	r24, 0x0081
     ce2:	88 23       	and	r24, r24
     ce4:	c1 f3       	breq	.-16     	; 0xcd6 <main+0x13e>
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <main+0x15c>
			APP_receivePassword();
			APP_savePasswordInEEPROM();
		}
		while(g_sendback==1){
			APP_receivePassword();
     ce8:	0e 94 be 0a 	call	0x157c	; 0x157c <APP_receivePassword>
			g_passwordConfirmationStatus=APP_confirmPassword2();
     cec:	0e 94 89 0b 	call	0x1712	; 0x1712 <APP_confirmPassword2>
     cf0:	80 93 85 00 	sts	0x0085, r24
	while(1){
		while(g_sendback==0){
			APP_receivePassword();
			APP_savePasswordInEEPROM();
		}
		while(g_sendback==1){
     cf4:	80 91 81 00 	lds	r24, 0x0081
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	b1 f3       	breq	.-20     	; 0xce8 <main+0x150>
			APP_receivePassword();
			g_passwordConfirmationStatus=APP_confirmPassword2();
		}
		UART_init(&uart_config_ptr);
     cfc:	8d e6       	ldi	r24, 0x6D	; 109
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <UART_init>

		if(g_passwordConfirmationStatus!=0){
     d04:	80 91 85 00 	lds	r24, 0x0085
     d08:	88 23       	and	r24, r24
     d0a:	09 f4       	brne	.+2      	; 0xd0e <main+0x176>
     d0c:	71 c1       	rjmp	.+738    	; 0xff0 <main+0x458>
			DCMotor_rotate(100,CW);
     d0e:	84 e6       	ldi	r24, 0x64	; 100
     d10:	62 e0       	ldi	r22, 0x02	; 2
     d12:	0e 94 47 0c 	call	0x188e	; 0x188e <DCMotor_rotate>
     d16:	fe 01       	movw	r30, r28
     d18:	e1 5a       	subi	r30, 0xA1	; 161
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a0 e2       	ldi	r26, 0x20	; 32
     d22:	b1 e4       	ldi	r27, 0x41	; 65
     d24:	80 83       	st	Z, r24
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	a2 83       	std	Z+2, r26	; 0x02
     d2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2c:	8e 01       	movw	r16, r28
     d2e:	05 5a       	subi	r16, 0xA5	; 165
     d30:	1f 4f       	sbci	r17, 0xFF	; 255
     d32:	fe 01       	movw	r30, r28
     d34:	e1 5a       	subi	r30, 0xA1	; 161
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a ef       	ldi	r20, 0xFA	; 250
     d46:	54 e4       	ldi	r21, 0x44	; 68
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	f8 01       	movw	r30, r16
     d52:	80 83       	st	Z, r24
     d54:	91 83       	std	Z+1, r25	; 0x01
     d56:	a2 83       	std	Z+2, r26	; 0x02
     d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d5a:	fe 01       	movw	r30, r28
     d5c:	e5 5a       	subi	r30, 0xA5	; 165
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e8       	ldi	r20, 0x80	; 128
     d6e:	5f e3       	ldi	r21, 0x3F	; 63
     d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d74:	88 23       	and	r24, r24
     d76:	44 f4       	brge	.+16     	; 0xd88 <main+0x1f0>
		__ticks = 1;
     d78:	fe 01       	movw	r30, r28
     d7a:	e7 5a       	subi	r30, 0xA7	; 167
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	80 83       	st	Z, r24
     d86:	64 c0       	rjmp	.+200    	; 0xe50 <main+0x2b8>
	else if (__tmp > 65535)
     d88:	fe 01       	movw	r30, r28
     d8a:	e5 5a       	subi	r30, 0xA5	; 165
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	60 81       	ld	r22, Z
     d90:	71 81       	ldd	r23, Z+1	; 0x01
     d92:	82 81       	ldd	r24, Z+2	; 0x02
     d94:	93 81       	ldd	r25, Z+3	; 0x03
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	3f ef       	ldi	r19, 0xFF	; 255
     d9a:	4f e7       	ldi	r20, 0x7F	; 127
     d9c:	57 e4       	ldi	r21, 0x47	; 71
     d9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da2:	18 16       	cp	r1, r24
     da4:	0c f0       	brlt	.+2      	; 0xda8 <main+0x210>
     da6:	43 c0       	rjmp	.+134    	; 0xe2e <main+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da8:	fe 01       	movw	r30, r28
     daa:	e1 5a       	subi	r30, 0xA1	; 161
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	60 81       	ld	r22, Z
     db0:	71 81       	ldd	r23, Z+1	; 0x01
     db2:	82 81       	ldd	r24, Z+2	; 0x02
     db4:	93 81       	ldd	r25, Z+3	; 0x03
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	8e 01       	movw	r16, r28
     dc8:	07 5a       	subi	r16, 0xA7	; 167
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	f8 01       	movw	r30, r16
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
     dde:	1f c0       	rjmp	.+62     	; 0xe1e <main+0x286>
     de0:	fe 01       	movw	r30, r28
     de2:	e9 5a       	subi	r30, 0xA9	; 169
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	88 ec       	ldi	r24, 0xC8	; 200
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dee:	fe 01       	movw	r30, r28
     df0:	e9 5a       	subi	r30, 0xA9	; 169
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <main+0x260>
     dfc:	fe 01       	movw	r30, r28
     dfe:	e9 5a       	subi	r30, 0xA9	; 169
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e06:	de 01       	movw	r26, r28
     e08:	a7 5a       	subi	r26, 0xA7	; 167
     e0a:	bf 4f       	sbci	r27, 0xFF	; 255
     e0c:	fe 01       	movw	r30, r28
     e0e:	e7 5a       	subi	r30, 0xA7	; 167
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	11 96       	adiw	r26, 0x01	; 1
     e1a:	9c 93       	st	X, r25
     e1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1e:	fe 01       	movw	r30, r28
     e20:	e7 5a       	subi	r30, 0xA7	; 167
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	d1 f6       	brne	.-76     	; 0xde0 <main+0x248>
     e2c:	27 c0       	rjmp	.+78     	; 0xe7c <main+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2e:	8e 01       	movw	r16, r28
     e30:	07 5a       	subi	r16, 0xA7	; 167
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	fe 01       	movw	r30, r28
     e36:	e5 5a       	subi	r30, 0xA5	; 165
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	60 81       	ld	r22, Z
     e3c:	71 81       	ldd	r23, Z+1	; 0x01
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	f8 01       	movw	r30, r16
     e4c:	91 83       	std	Z+1, r25	; 0x01
     e4e:	80 83       	st	Z, r24
     e50:	de 01       	movw	r26, r28
     e52:	ab 5a       	subi	r26, 0xAB	; 171
     e54:	bf 4f       	sbci	r27, 0xFF	; 255
     e56:	fe 01       	movw	r30, r28
     e58:	e7 5a       	subi	r30, 0xA7	; 167
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	80 81       	ld	r24, Z
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	8d 93       	st	X+, r24
     e62:	9c 93       	st	X, r25
     e64:	fe 01       	movw	r30, r28
     e66:	eb 5a       	subi	r30, 0xAB	; 171
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	80 81       	ld	r24, Z
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <main+0x2d6>
     e72:	fe 01       	movw	r30, r28
     e74:	eb 5a       	subi	r30, 0xAB	; 171
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	80 83       	st	Z, r24
			_delay_ms(10);
			UART_sendByte(PASSWORDS_DONOT_MATCH);
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	0e 94 91 17 	call	0x2f22	; 0x2f22 <UART_sendByte>
     e82:	fe 01       	movw	r30, r28
     e84:	ef 5a       	subi	r30, 0xAF	; 175
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a8 ec       	ldi	r26, 0xC8	; 200
     e8e:	b2 e4       	ldi	r27, 0x42	; 66
     e90:	80 83       	st	Z, r24
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	a2 83       	std	Z+2, r26	; 0x02
     e96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e98:	8e 01       	movw	r16, r28
     e9a:	03 5b       	subi	r16, 0xB3	; 179
     e9c:	1f 4f       	sbci	r17, 0xFF	; 255
     e9e:	fe 01       	movw	r30, r28
     ea0:	ef 5a       	subi	r30, 0xAF	; 175
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	4a ef       	ldi	r20, 0xFA	; 250
     eb2:	54 e4       	ldi	r21, 0x44	; 68
     eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	f8 01       	movw	r30, r16
     ebe:	80 83       	st	Z, r24
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	a2 83       	std	Z+2, r26	; 0x02
     ec4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ec6:	fe 01       	movw	r30, r28
     ec8:	e3 5b       	subi	r30, 0xB3	; 179
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	60 81       	ld	r22, Z
     ece:	71 81       	ldd	r23, Z+1	; 0x01
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	44 f4       	brge	.+16     	; 0xef4 <main+0x35c>
		__ticks = 1;
     ee4:	fe 01       	movw	r30, r28
     ee6:	e5 5b       	subi	r30, 0xB5	; 181
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	91 83       	std	Z+1, r25	; 0x01
     ef0:	80 83       	st	Z, r24
     ef2:	64 c0       	rjmp	.+200    	; 0xfbc <main+0x424>
	else if (__tmp > 65535)
     ef4:	fe 01       	movw	r30, r28
     ef6:	e3 5b       	subi	r30, 0xB3	; 179
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	60 81       	ld	r22, Z
     efc:	71 81       	ldd	r23, Z+1	; 0x01
     efe:	82 81       	ldd	r24, Z+2	; 0x02
     f00:	93 81       	ldd	r25, Z+3	; 0x03
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	3f ef       	ldi	r19, 0xFF	; 255
     f06:	4f e7       	ldi	r20, 0x7F	; 127
     f08:	57 e4       	ldi	r21, 0x47	; 71
     f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0e:	18 16       	cp	r1, r24
     f10:	0c f0       	brlt	.+2      	; 0xf14 <main+0x37c>
     f12:	43 c0       	rjmp	.+134    	; 0xf9a <main+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f14:	fe 01       	movw	r30, r28
     f16:	ef 5a       	subi	r30, 0xAF	; 175
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e2       	ldi	r20, 0x20	; 32
     f28:	51 e4       	ldi	r21, 0x41	; 65
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	8e 01       	movw	r16, r28
     f34:	05 5b       	subi	r16, 0xB5	; 181
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	f8 01       	movw	r30, r16
     f46:	91 83       	std	Z+1, r25	; 0x01
     f48:	80 83       	st	Z, r24
     f4a:	1f c0       	rjmp	.+62     	; 0xf8a <main+0x3f2>
     f4c:	fe 01       	movw	r30, r28
     f4e:	e7 5b       	subi	r30, 0xB7	; 183
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	88 ec       	ldi	r24, 0xC8	; 200
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	80 83       	st	Z, r24
     f5a:	fe 01       	movw	r30, r28
     f5c:	e7 5b       	subi	r30, 0xB7	; 183
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <main+0x3cc>
     f68:	fe 01       	movw	r30, r28
     f6a:	e7 5b       	subi	r30, 0xB7	; 183
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f72:	de 01       	movw	r26, r28
     f74:	a5 5b       	subi	r26, 0xB5	; 181
     f76:	bf 4f       	sbci	r27, 0xFF	; 255
     f78:	fe 01       	movw	r30, r28
     f7a:	e5 5b       	subi	r30, 0xB5	; 181
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	80 81       	ld	r24, Z
     f80:	91 81       	ldd	r25, Z+1	; 0x01
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	11 96       	adiw	r26, 0x01	; 1
     f86:	9c 93       	st	X, r25
     f88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8a:	fe 01       	movw	r30, r28
     f8c:	e5 5b       	subi	r30, 0xB5	; 181
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	80 81       	ld	r24, Z
     f92:	91 81       	ldd	r25, Z+1	; 0x01
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	d1 f6       	brne	.-76     	; 0xf4c <main+0x3b4>
     f98:	28 c0       	rjmp	.+80     	; 0xfea <main+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9a:	8e 01       	movw	r16, r28
     f9c:	05 5b       	subi	r16, 0xB5	; 181
     f9e:	1f 4f       	sbci	r17, 0xFF	; 255
     fa0:	fe 01       	movw	r30, r28
     fa2:	e3 5b       	subi	r30, 0xB3	; 179
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	f8 01       	movw	r30, r16
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
     fbc:	de 01       	movw	r26, r28
     fbe:	a9 5b       	subi	r26, 0xB9	; 185
     fc0:	bf 4f       	sbci	r27, 0xFF	; 255
     fc2:	fe 01       	movw	r30, r28
     fc4:	e5 5b       	subi	r30, 0xB5	; 181
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	11 96       	adiw	r26, 0x01	; 1
     fce:	9c 93       	st	X, r25
     fd0:	8e 93       	st	-X, r24
     fd2:	fe 01       	movw	r30, r28
     fd4:	e9 5b       	subi	r30, 0xB9	; 185
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <main+0x444>
     fe0:	fe 01       	movw	r30, r28
     fe2:	e9 5b       	subi	r30, 0xB9	; 185
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	80 83       	st	Z, r24
			_delay_ms(100);
			g_sendback=0;
     fea:	10 92 81 00 	sts	0x0081, r1
     fee:	77 ce       	rjmp	.-786    	; 0xcde <main+0x146>
						break;
					}
				}
			}
		}
	}
     ff0:	fe 01       	movw	r30, r28
     ff2:	ed 5b       	subi	r30, 0xBD	; 189
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a8 ec       	ldi	r26, 0xC8	; 200
     ffc:	b2 e4       	ldi	r27, 0x42	; 66
     ffe:	80 83       	st	Z, r24
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	a2 83       	std	Z+2, r26	; 0x02
    1004:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1006:	8e 01       	movw	r16, r28
    1008:	01 5c       	subi	r16, 0xC1	; 193
    100a:	1f 4f       	sbci	r17, 0xFF	; 255
    100c:	fe 01       	movw	r30, r28
    100e:	ed 5b       	subi	r30, 0xBD	; 189
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	4a ef       	ldi	r20, 0xFA	; 250
    1020:	54 e4       	ldi	r21, 0x44	; 68
    1022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	f8 01       	movw	r30, r16
    102c:	80 83       	st	Z, r24
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	a2 83       	std	Z+2, r26	; 0x02
    1032:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1034:	fe 01       	movw	r30, r28
    1036:	ff 96       	adiw	r30, 0x3f	; 63
    1038:	60 81       	ld	r22, Z
    103a:	71 81       	ldd	r23, Z+1	; 0x01
    103c:	82 81       	ldd	r24, Z+2	; 0x02
    103e:	93 81       	ldd	r25, Z+3	; 0x03
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e8       	ldi	r20, 0x80	; 128
    1046:	5f e3       	ldi	r21, 0x3F	; 63
    1048:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    104c:	88 23       	and	r24, r24
    104e:	2c f4       	brge	.+10     	; 0x105a <main+0x4c2>
		__ticks = 1;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9e af       	std	Y+62, r25	; 0x3e
    1056:	8d af       	std	Y+61, r24	; 0x3d
    1058:	46 c0       	rjmp	.+140    	; 0x10e6 <main+0x54e>
	else if (__tmp > 65535)
    105a:	fe 01       	movw	r30, r28
    105c:	ff 96       	adiw	r30, 0x3f	; 63
    105e:	60 81       	ld	r22, Z
    1060:	71 81       	ldd	r23, Z+1	; 0x01
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	3f ef       	ldi	r19, 0xFF	; 255
    106a:	4f e7       	ldi	r20, 0x7F	; 127
    106c:	57 e4       	ldi	r21, 0x47	; 71
    106e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1072:	18 16       	cp	r1, r24
    1074:	64 f5       	brge	.+88     	; 0x10ce <main+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1076:	fe 01       	movw	r30, r28
    1078:	ed 5b       	subi	r30, 0xBD	; 189
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e2       	ldi	r20, 0x20	; 32
    108a:	51 e4       	ldi	r21, 0x41	; 65
    108c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9e af       	std	Y+62, r25	; 0x3e
    10a2:	8d af       	std	Y+61, r24	; 0x3d
    10a4:	0f c0       	rjmp	.+30     	; 0x10c4 <main+0x52c>
    10a6:	88 ec       	ldi	r24, 0xC8	; 200
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9c af       	std	Y+60, r25	; 0x3c
    10ac:	8b af       	std	Y+59, r24	; 0x3b
    10ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    10b0:	9c ad       	ldd	r25, Y+60	; 0x3c
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <main+0x51a>
    10b6:	9c af       	std	Y+60, r25	; 0x3c
    10b8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    10bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	9e af       	std	Y+62, r25	; 0x3e
    10c2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    10c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	69 f7       	brne	.-38     	; 0x10a6 <main+0x50e>
    10cc:	16 c0       	rjmp	.+44     	; 0x10fa <main+0x562>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ce:	fe 01       	movw	r30, r28
    10d0:	ff 96       	adiw	r30, 0x3f	; 63
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	9e af       	std	Y+62, r25	; 0x3e
    10e4:	8d af       	std	Y+61, r24	; 0x3d
    10e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    10e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    10ea:	9a af       	std	Y+58, r25	; 0x3a
    10ec:	89 af       	std	Y+57, r24	; 0x39
    10ee:	89 ad       	ldd	r24, Y+57	; 0x39
    10f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <main+0x55a>
    10f6:	9a af       	std	Y+58, r25	; 0x3a
    10f8:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(100);
			g_sendback=0;
		}
		else{
			_delay_ms(100);
			UART_sendByte(PASSWORDS_MATCH);
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	0e 94 91 17 	call	0x2f22	; 0x2f22 <UART_sendByte>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a8 ec       	ldi	r26, 0xC8	; 200
    1106:	b2 e4       	ldi	r27, 0x42	; 66
    1108:	8d ab       	std	Y+53, r24	; 0x35
    110a:	9e ab       	std	Y+54, r25	; 0x36
    110c:	af ab       	std	Y+55, r26	; 0x37
    110e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1110:	6d a9       	ldd	r22, Y+53	; 0x35
    1112:	7e a9       	ldd	r23, Y+54	; 0x36
    1114:	8f a9       	ldd	r24, Y+55	; 0x37
    1116:	98 ad       	ldd	r25, Y+56	; 0x38
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a ef       	ldi	r20, 0xFA	; 250
    111e:	54 e4       	ldi	r21, 0x44	; 68
    1120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	89 ab       	std	Y+49, r24	; 0x31
    112a:	9a ab       	std	Y+50, r25	; 0x32
    112c:	ab ab       	std	Y+51, r26	; 0x33
    112e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1130:	69 a9       	ldd	r22, Y+49	; 0x31
    1132:	7a a9       	ldd	r23, Y+50	; 0x32
    1134:	8b a9       	ldd	r24, Y+51	; 0x33
    1136:	9c a9       	ldd	r25, Y+52	; 0x34
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1144:	88 23       	and	r24, r24
    1146:	2c f4       	brge	.+10     	; 0x1152 <main+0x5ba>
		__ticks = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	98 ab       	std	Y+48, r25	; 0x30
    114e:	8f a7       	std	Y+47, r24	; 0x2f
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <main+0x638>
	else if (__tmp > 65535)
    1152:	69 a9       	ldd	r22, Y+49	; 0x31
    1154:	7a a9       	ldd	r23, Y+50	; 0x32
    1156:	8b a9       	ldd	r24, Y+51	; 0x33
    1158:	9c a9       	ldd	r25, Y+52	; 0x34
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	4c f5       	brge	.+82     	; 0x11bc <main+0x624>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116a:	6d a9       	ldd	r22, Y+53	; 0x35
    116c:	7e a9       	ldd	r23, Y+54	; 0x36
    116e:	8f a9       	ldd	r24, Y+55	; 0x37
    1170:	98 ad       	ldd	r25, Y+56	; 0x38
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	51 e4       	ldi	r21, 0x41	; 65
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	98 ab       	std	Y+48, r25	; 0x30
    1190:	8f a7       	std	Y+47, r24	; 0x2f
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <main+0x61a>
    1194:	88 ec       	ldi	r24, 0xC8	; 200
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9e a7       	std	Y+46, r25	; 0x2e
    119a:	8d a7       	std	Y+45, r24	; 0x2d
    119c:	8d a5       	ldd	r24, Y+45	; 0x2d
    119e:	9e a5       	ldd	r25, Y+46	; 0x2e
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <main+0x608>
    11a4:	9e a7       	std	Y+46, r25	; 0x2e
    11a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11aa:	98 a9       	ldd	r25, Y+48	; 0x30
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	98 ab       	std	Y+48, r25	; 0x30
    11b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b4:	98 a9       	ldd	r25, Y+48	; 0x30
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	69 f7       	brne	.-38     	; 0x1194 <main+0x5fc>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <main+0x64c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11bc:	69 a9       	ldd	r22, Y+49	; 0x31
    11be:	7a a9       	ldd	r23, Y+50	; 0x32
    11c0:	8b a9       	ldd	r24, Y+51	; 0x33
    11c2:	9c a9       	ldd	r25, Y+52	; 0x34
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	98 ab       	std	Y+48, r25	; 0x30
    11ce:	8f a7       	std	Y+47, r24	; 0x2f
    11d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d2:	98 a9       	ldd	r25, Y+48	; 0x30
    11d4:	9c a7       	std	Y+44, r25	; 0x2c
    11d6:	8b a7       	std	Y+43, r24	; 0x2b
    11d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11da:	9c a5       	ldd	r25, Y+44	; 0x2c
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <main+0x644>
    11e0:	9c a7       	std	Y+44, r25	; 0x2c
    11e2:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(100);

			while(1){
				// UART_init(&uart_config_ptr);
				g_optionPicked = UART_receiveByte();
    11e4:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <UART_receiveByte>
    11e8:	80 93 8f 00 	sts	0x008F, r24
			//	_delay_ms(100);
			//	g_optionPicked = '+' ;
				if(g_optionPicked=='+'){
    11ec:	80 91 8f 00 	lds	r24, 0x008F
    11f0:	8b 32       	cpi	r24, 0x2B	; 43
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <main+0x65e>
    11f4:	25 c1       	rjmp	.+586    	; 0x1440 <main+0x8a8>
					while(1){
						// UART_init(&uart_config_ptr);
						APP_receivePassword();
    11f6:	0e 94 be 0a 	call	0x157c	; 0x157c <APP_receivePassword>
						//g_passwordConfirmationStatus=APP_confirmPassword();

						if(APP_confirmPassword2()==0){
    11fa:	0e 94 89 0b 	call	0x1712	; 0x1712 <APP_confirmPassword2>
    11fe:	88 23       	and	r24, r24
    1200:	09 f0       	breq	.+2      	; 0x1204 <main+0x66c>
    1202:	9a c0       	rjmp	.+308    	; 0x1338 <main+0x7a0>
							UART_sendByte(CORRECT_PASSWORD);
    1204:	85 e2       	ldi	r24, 0x25	; 37
    1206:	0e 94 91 17 	call	0x2f22	; 0x2f22 <UART_sendByte>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a8 ec       	ldi	r26, 0xC8	; 200
    1210:	b2 e4       	ldi	r27, 0x42	; 66
    1212:	8f a3       	std	Y+39, r24	; 0x27
    1214:	98 a7       	std	Y+40, r25	; 0x28
    1216:	a9 a7       	std	Y+41, r26	; 0x29
    1218:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121a:	6f a1       	ldd	r22, Y+39	; 0x27
    121c:	78 a5       	ldd	r23, Y+40	; 0x28
    121e:	89 a5       	ldd	r24, Y+41	; 0x29
    1220:	9a a5       	ldd	r25, Y+42	; 0x2a
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4a ef       	ldi	r20, 0xFA	; 250
    1228:	54 e4       	ldi	r21, 0x44	; 68
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8b a3       	std	Y+35, r24	; 0x23
    1234:	9c a3       	std	Y+36, r25	; 0x24
    1236:	ad a3       	std	Y+37, r26	; 0x25
    1238:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    123a:	6b a1       	ldd	r22, Y+35	; 0x23
    123c:	7c a1       	ldd	r23, Y+36	; 0x24
    123e:	8d a1       	ldd	r24, Y+37	; 0x25
    1240:	9e a1       	ldd	r25, Y+38	; 0x26
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	2c f4       	brge	.+10     	; 0x125c <main+0x6c4>
		__ticks = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9a a3       	std	Y+34, r25	; 0x22
    1258:	89 a3       	std	Y+33, r24	; 0x21
    125a:	3f c0       	rjmp	.+126    	; 0x12da <main+0x742>
	else if (__tmp > 65535)
    125c:	6b a1       	ldd	r22, Y+35	; 0x23
    125e:	7c a1       	ldd	r23, Y+36	; 0x24
    1260:	8d a1       	ldd	r24, Y+37	; 0x25
    1262:	9e a1       	ldd	r25, Y+38	; 0x26
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	57 e4       	ldi	r21, 0x47	; 71
    126c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1270:	18 16       	cp	r1, r24
    1272:	4c f5       	brge	.+82     	; 0x12c6 <main+0x72e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	6f a1       	ldd	r22, Y+39	; 0x27
    1276:	78 a5       	ldd	r23, Y+40	; 0x28
    1278:	89 a5       	ldd	r24, Y+41	; 0x29
    127a:	9a a5       	ldd	r25, Y+42	; 0x2a
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9a a3       	std	Y+34, r25	; 0x22
    129a:	89 a3       	std	Y+33, r24	; 0x21
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <main+0x724>
    129e:	88 ec       	ldi	r24, 0xC8	; 200
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	98 a3       	std	Y+32, r25	; 0x20
    12a4:	8f 8f       	std	Y+31, r24	; 0x1f
    12a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12a8:	98 a1       	ldd	r25, Y+32	; 0x20
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <main+0x712>
    12ae:	98 a3       	std	Y+32, r25	; 0x20
    12b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	89 a1       	ldd	r24, Y+33	; 0x21
    12b4:	9a a1       	ldd	r25, Y+34	; 0x22
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9a a3       	std	Y+34, r25	; 0x22
    12ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12bc:	89 a1       	ldd	r24, Y+33	; 0x21
    12be:	9a a1       	ldd	r25, Y+34	; 0x22
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f7       	brne	.-38     	; 0x129e <main+0x706>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <main+0x756>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c6:	6b a1       	ldd	r22, Y+35	; 0x23
    12c8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ca:	8d a1       	ldd	r24, Y+37	; 0x25
    12cc:	9e a1       	ldd	r25, Y+38	; 0x26
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9a a3       	std	Y+34, r25	; 0x22
    12d8:	89 a3       	std	Y+33, r24	; 0x21
    12da:	89 a1       	ldd	r24, Y+33	; 0x21
    12dc:	9a a1       	ldd	r25, Y+34	; 0x22
    12de:	9e 8f       	std	Y+30, r25	; 0x1e
    12e0:	8d 8f       	std	Y+29, r24	; 0x1d
    12e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <main+0x74e>
    12ea:	9e 8f       	std	Y+30, r25	; 0x1e
    12ec:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(100);

							g_ticks=0;
    12ee:	10 92 80 00 	sts	0x0080, r1
							DCMotor_rotate(100,CW);
    12f2:	84 e6       	ldi	r24, 0x64	; 100
    12f4:	62 e0       	ldi	r22, 0x02	; 2
    12f6:	0e 94 47 0c 	call	0x188e	; 0x188e <DCMotor_rotate>
							while(g_ticks<8);
    12fa:	80 91 80 00 	lds	r24, 0x0080
    12fe:	88 30       	cpi	r24, 0x08	; 8
    1300:	e0 f3       	brcs	.-8      	; 0x12fa <main+0x762>

							g_ticks=0;
    1302:	10 92 80 00 	sts	0x0080, r1
							DCMotor_rotate(0,OFF);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	0e 94 47 0c 	call	0x188e	; 0x188e <DCMotor_rotate>
							while(g_ticks<2);
    130e:	80 91 80 00 	lds	r24, 0x0080
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	e0 f3       	brcs	.-8      	; 0x130e <main+0x776>

							g_ticks=0;
    1316:	10 92 80 00 	sts	0x0080, r1
							DCMotor_rotate(100,ACW);
    131a:	84 e6       	ldi	r24, 0x64	; 100
    131c:	61 e0       	ldi	r22, 0x01	; 1
    131e:	0e 94 47 0c 	call	0x188e	; 0x188e <DCMotor_rotate>
							while(g_ticks<8);
    1322:	80 91 80 00 	lds	r24, 0x0080
    1326:	88 30       	cpi	r24, 0x08	; 8
    1328:	e0 f3       	brcs	.-8      	; 0x1322 <main+0x78a>

							DCMotor_rotate(0,OFF);
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	0e 94 47 0c 	call	0x188e	; 0x188e <DCMotor_rotate>

							g_sendback=0;
    1332:	10 92 81 00 	sts	0x0081, r1
    1336:	56 cf       	rjmp	.-340    	; 0x11e4 <main+0x64c>
							break;
						}

						else{
							g_wrongPasswordCounter++;
    1338:	80 91 82 00 	lds	r24, 0x0082
    133c:	8f 5f       	subi	r24, 0xFF	; 255
    133e:	80 93 82 00 	sts	0x0082, r24
							UART_sendByte(WRONG_PASSWORD);
    1342:	86 e2       	ldi	r24, 0x26	; 38
    1344:	0e 94 91 17 	call	0x2f22	; 0x2f22 <UART_sendByte>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a8 ec       	ldi	r26, 0xC8	; 200
    134e:	b2 e4       	ldi	r27, 0x42	; 66
    1350:	89 8f       	std	Y+25, r24	; 0x19
    1352:	9a 8f       	std	Y+26, r25	; 0x1a
    1354:	ab 8f       	std	Y+27, r26	; 0x1b
    1356:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1358:	69 8d       	ldd	r22, Y+25	; 0x19
    135a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    135c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    135e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	4a ef       	ldi	r20, 0xFA	; 250
    1366:	54 e4       	ldi	r21, 0x44	; 68
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	8d 8b       	std	Y+21, r24	; 0x15
    1372:	9e 8b       	std	Y+22, r25	; 0x16
    1374:	af 8b       	std	Y+23, r26	; 0x17
    1376:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1378:	6d 89       	ldd	r22, Y+21	; 0x15
    137a:	7e 89       	ldd	r23, Y+22	; 0x16
    137c:	8f 89       	ldd	r24, Y+23	; 0x17
    137e:	98 8d       	ldd	r25, Y+24	; 0x18
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e8       	ldi	r20, 0x80	; 128
    1386:	5f e3       	ldi	r21, 0x3F	; 63
    1388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    138c:	88 23       	and	r24, r24
    138e:	2c f4       	brge	.+10     	; 0x139a <main+0x802>
		__ticks = 1;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	9c 8b       	std	Y+20, r25	; 0x14
    1396:	8b 8b       	std	Y+19, r24	; 0x13
    1398:	3f c0       	rjmp	.+126    	; 0x1418 <main+0x880>
	else if (__tmp > 65535)
    139a:	6d 89       	ldd	r22, Y+21	; 0x15
    139c:	7e 89       	ldd	r23, Y+22	; 0x16
    139e:	8f 89       	ldd	r24, Y+23	; 0x17
    13a0:	98 8d       	ldd	r25, Y+24	; 0x18
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	3f ef       	ldi	r19, 0xFF	; 255
    13a6:	4f e7       	ldi	r20, 0x7F	; 127
    13a8:	57 e4       	ldi	r21, 0x47	; 71
    13aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	4c f5       	brge	.+82     	; 0x1404 <main+0x86c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b2:	69 8d       	ldd	r22, Y+25	; 0x19
    13b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e2       	ldi	r20, 0x20	; 32
    13c0:	51 e4       	ldi	r21, 0x41	; 65
    13c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9c 8b       	std	Y+20, r25	; 0x14
    13d8:	8b 8b       	std	Y+19, r24	; 0x13
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <main+0x862>
    13dc:	88 ec       	ldi	r24, 0xC8	; 200
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9a 8b       	std	Y+18, r25	; 0x12
    13e2:	89 8b       	std	Y+17, r24	; 0x11
    13e4:	89 89       	ldd	r24, Y+17	; 0x11
    13e6:	9a 89       	ldd	r25, Y+18	; 0x12
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <main+0x850>
    13ec:	9a 8b       	std	Y+18, r25	; 0x12
    13ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f0:	8b 89       	ldd	r24, Y+19	; 0x13
    13f2:	9c 89       	ldd	r25, Y+20	; 0x14
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	9c 8b       	std	Y+20, r25	; 0x14
    13f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fa:	8b 89       	ldd	r24, Y+19	; 0x13
    13fc:	9c 89       	ldd	r25, Y+20	; 0x14
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	69 f7       	brne	.-38     	; 0x13dc <main+0x844>
    1402:	14 c0       	rjmp	.+40     	; 0x142c <main+0x894>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1404:	6d 89       	ldd	r22, Y+21	; 0x15
    1406:	7e 89       	ldd	r23, Y+22	; 0x16
    1408:	8f 89       	ldd	r24, Y+23	; 0x17
    140a:	98 8d       	ldd	r25, Y+24	; 0x18
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9c 8b       	std	Y+20, r25	; 0x14
    1416:	8b 8b       	std	Y+19, r24	; 0x13
    1418:	8b 89       	ldd	r24, Y+19	; 0x13
    141a:	9c 89       	ldd	r25, Y+20	; 0x14
    141c:	98 8b       	std	Y+16, r25	; 0x10
    141e:	8f 87       	std	Y+15, r24	; 0x0f
    1420:	8f 85       	ldd	r24, Y+15	; 0x0f
    1422:	98 89       	ldd	r25, Y+16	; 0x10
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <main+0x88c>
    1428:	98 8b       	std	Y+16, r25	; 0x10
    142a:	8f 87       	std	Y+15, r24	; 0x0f
                            _delay_ms(100) ;
							if(g_wrongPasswordCounter==3){
    142c:	80 91 82 00 	lds	r24, 0x0082
    1430:	83 30       	cpi	r24, 0x03	; 3
    1432:	09 f0       	breq	.+2      	; 0x1436 <main+0x89e>
    1434:	e0 ce       	rjmp	.-576    	; 0x11f6 <main+0x65e>
								APP_Buzzer();
    1436:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <APP_Buzzer>
								g_sendback=0;
    143a:	10 92 81 00 	sts	0x0081, r1
    143e:	d2 ce       	rjmp	.-604    	; 0x11e4 <main+0x64c>
								break;
							}
						}
					}
				}
				else if(g_optionPicked=='-'){
    1440:	80 91 8f 00 	lds	r24, 0x008F
    1444:	8d 32       	cpi	r24, 0x2D	; 45
    1446:	09 f0       	breq	.+2      	; 0x144a <main+0x8b2>
    1448:	cd ce       	rjmp	.-614    	; 0x11e4 <main+0x64c>
					while(1){
						UART_init(&uart_config_ptr);
    144a:	8d e6       	ldi	r24, 0x6D	; 109
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <UART_init>
						APP_receivePassword();
    1452:	0e 94 be 0a 	call	0x157c	; 0x157c <APP_receivePassword>
						g_passwordConfirmationStatus=APP_confirmPassword2();
    1456:	0e 94 89 0b 	call	0x1712	; 0x1712 <APP_confirmPassword2>
    145a:	80 93 85 00 	sts	0x0085, r24

						if(g_passwordConfirmationStatus==0){
    145e:	80 91 85 00 	lds	r24, 0x0085
    1462:	88 23       	and	r24, r24
    1464:	09 f0       	breq	.+2      	; 0x1468 <main+0x8d0>
    1466:	78 c0       	rjmp	.+240    	; 0x1558 <main+0x9c0>
							UART_sendByte(CORRECT_PASSWORD);
    1468:	85 e2       	ldi	r24, 0x25	; 37
    146a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <UART_sendByte>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a0 e2       	ldi	r26, 0x20	; 32
    1474:	b1 e4       	ldi	r27, 0x41	; 65
    1476:	8b 87       	std	Y+11, r24	; 0x0b
    1478:	9c 87       	std	Y+12, r25	; 0x0c
    147a:	ad 87       	std	Y+13, r26	; 0x0d
    147c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1480:	7c 85       	ldd	r23, Y+12	; 0x0c
    1482:	8d 85       	ldd	r24, Y+13	; 0x0d
    1484:	9e 85       	ldd	r25, Y+14	; 0x0e
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	4a ef       	ldi	r20, 0xFA	; 250
    148c:	54 e4       	ldi	r21, 0x44	; 68
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	8f 83       	std	Y+7, r24	; 0x07
    1498:	98 87       	std	Y+8, r25	; 0x08
    149a:	a9 87       	std	Y+9, r26	; 0x09
    149c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    149e:	6f 81       	ldd	r22, Y+7	; 0x07
    14a0:	78 85       	ldd	r23, Y+8	; 0x08
    14a2:	89 85       	ldd	r24, Y+9	; 0x09
    14a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e8       	ldi	r20, 0x80	; 128
    14ac:	5f e3       	ldi	r21, 0x3F	; 63
    14ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b2:	88 23       	and	r24, r24
    14b4:	2c f4       	brge	.+10     	; 0x14c0 <main+0x928>
		__ticks = 1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9e 83       	std	Y+6, r25	; 0x06
    14bc:	8d 83       	std	Y+5, r24	; 0x05
    14be:	3f c0       	rjmp	.+126    	; 0x153e <main+0x9a6>
	else if (__tmp > 65535)
    14c0:	6f 81       	ldd	r22, Y+7	; 0x07
    14c2:	78 85       	ldd	r23, Y+8	; 0x08
    14c4:	89 85       	ldd	r24, Y+9	; 0x09
    14c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	3f ef       	ldi	r19, 0xFF	; 255
    14cc:	4f e7       	ldi	r20, 0x7F	; 127
    14ce:	57 e4       	ldi	r21, 0x47	; 71
    14d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d4:	18 16       	cp	r1, r24
    14d6:	4c f5       	brge	.+82     	; 0x152a <main+0x992>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14da:	7c 85       	ldd	r23, Y+12	; 0x0c
    14dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14de:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e2       	ldi	r20, 0x20	; 32
    14e6:	51 e4       	ldi	r21, 0x41	; 65
    14e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	bc 01       	movw	r22, r24
    14f2:	cd 01       	movw	r24, r26
    14f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	0f c0       	rjmp	.+30     	; 0x1520 <main+0x988>
    1502:	88 ec       	ldi	r24, 0xC8	; 200
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <main+0x976>
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	69 f7       	brne	.-38     	; 0x1502 <main+0x96a>
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <main+0x9ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152a:	6f 81       	ldd	r22, Y+7	; 0x07
    152c:	78 85       	ldd	r23, Y+8	; 0x08
    152e:	89 85       	ldd	r24, Y+9	; 0x09
    1530:	9a 85       	ldd	r25, Y+10	; 0x0a
    1532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <main+0x9b2>
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(10);
							g_sendback=0;
    1552:	10 92 81 00 	sts	0x0081, r1
    1556:	46 ce       	rjmp	.-884    	; 0x11e4 <main+0x64c>
							break;
						}
						else{
							g_wrongPasswordCounter++;
    1558:	80 91 82 00 	lds	r24, 0x0082
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	80 93 82 00 	sts	0x0082, r24
							UART_sendByte(WRONG_PASSWORD);
    1562:	86 e2       	ldi	r24, 0x26	; 38
    1564:	0e 94 91 17 	call	0x2f22	; 0x2f22 <UART_sendByte>

							if(g_wrongPasswordCounter==3){
    1568:	80 91 82 00 	lds	r24, 0x0082
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	09 f0       	breq	.+2      	; 0x1572 <main+0x9da>
    1570:	39 ce       	rjmp	.-910    	; 0x11e4 <main+0x64c>
								APP_Buzzer();
    1572:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <APP_Buzzer>
								g_sendback=0;
    1576:	10 92 81 00 	sts	0x0081, r1
    157a:	34 ce       	rjmp	.-920    	; 0x11e4 <main+0x64c>

0000157c <APP_receivePassword>:
			}
		}
	}
}

void APP_receivePassword(void){
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	2f 97       	sbiw	r28, 0x0f	; 15
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++){
    1594:	1f 86       	std	Y+15, r1	; 0x0f
    1596:	7e c0       	rjmp	.+252    	; 0x1694 <APP_receivePassword+0x118>
		g_password[i]=UART_receiveByte();
    1598:	8f 85       	ldd	r24, Y+15	; 0x0f
    159a:	08 2f       	mov	r16, r24
    159c:	10 e0       	ldi	r17, 0x00	; 0
    159e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <UART_receiveByte>
    15a2:	f8 01       	movw	r30, r16
    15a4:	ea 57       	subi	r30, 0x7A	; 122
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	80 83       	st	Z, r24
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a0 e2       	ldi	r26, 0x20	; 32
    15b0:	b1 e4       	ldi	r27, 0x41	; 65
    15b2:	8b 87       	std	Y+11, r24	; 0x0b
    15b4:	9c 87       	std	Y+12, r25	; 0x0c
    15b6:	ad 87       	std	Y+13, r26	; 0x0d
    15b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    15bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15be:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	4a ef       	ldi	r20, 0xFA	; 250
    15c8:	54 e4       	ldi	r21, 0x44	; 68
    15ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	8f 83       	std	Y+7, r24	; 0x07
    15d4:	98 87       	std	Y+8, r25	; 0x08
    15d6:	a9 87       	std	Y+9, r26	; 0x09
    15d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15da:	6f 81       	ldd	r22, Y+7	; 0x07
    15dc:	78 85       	ldd	r23, Y+8	; 0x08
    15de:	89 85       	ldd	r24, Y+9	; 0x09
    15e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e8       	ldi	r20, 0x80	; 128
    15e8:	5f e3       	ldi	r21, 0x3F	; 63
    15ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ee:	88 23       	and	r24, r24
    15f0:	2c f4       	brge	.+10     	; 0x15fc <APP_receivePassword+0x80>
		__ticks = 1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9e 83       	std	Y+6, r25	; 0x06
    15f8:	8d 83       	std	Y+5, r24	; 0x05
    15fa:	3f c0       	rjmp	.+126    	; 0x167a <APP_receivePassword+0xfe>
	else if (__tmp > 65535)
    15fc:	6f 81       	ldd	r22, Y+7	; 0x07
    15fe:	78 85       	ldd	r23, Y+8	; 0x08
    1600:	89 85       	ldd	r24, Y+9	; 0x09
    1602:	9a 85       	ldd	r25, Y+10	; 0x0a
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	3f ef       	ldi	r19, 0xFF	; 255
    1608:	4f e7       	ldi	r20, 0x7F	; 127
    160a:	57 e4       	ldi	r21, 0x47	; 71
    160c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1610:	18 16       	cp	r1, r24
    1612:	4c f5       	brge	.+82     	; 0x1666 <APP_receivePassword+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1614:	6b 85       	ldd	r22, Y+11	; 0x0b
    1616:	7c 85       	ldd	r23, Y+12	; 0x0c
    1618:	8d 85       	ldd	r24, Y+13	; 0x0d
    161a:	9e 85       	ldd	r25, Y+14	; 0x0e
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e2       	ldi	r20, 0x20	; 32
    1622:	51 e4       	ldi	r21, 0x41	; 65
    1624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	bc 01       	movw	r22, r24
    162e:	cd 01       	movw	r24, r26
    1630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	9e 83       	std	Y+6, r25	; 0x06
    163a:	8d 83       	std	Y+5, r24	; 0x05
    163c:	0f c0       	rjmp	.+30     	; 0x165c <APP_receivePassword+0xe0>
    163e:	88 ec       	ldi	r24, 0xC8	; 200
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9c 83       	std	Y+4, r25	; 0x04
    1644:	8b 83       	std	Y+3, r24	; 0x03
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	f1 f7       	brne	.-4      	; 0x164a <APP_receivePassword+0xce>
    164e:	9c 83       	std	Y+4, r25	; 0x04
    1650:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	9e 81       	ldd	r25, Y+6	; 0x06
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	69 f7       	brne	.-38     	; 0x163e <APP_receivePassword+0xc2>
    1664:	14 c0       	rjmp	.+40     	; 0x168e <APP_receivePassword+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1666:	6f 81       	ldd	r22, Y+7	; 0x07
    1668:	78 85       	ldd	r23, Y+8	; 0x08
    166a:	89 85       	ldd	r24, Y+9	; 0x09
    166c:	9a 85       	ldd	r25, Y+10	; 0x0a
    166e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 83       	std	Y+5, r24	; 0x05
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	9a 81       	ldd	r25, Y+2	; 0x02
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <APP_receivePassword+0x10a>
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	89 83       	std	Y+1, r24	; 0x01
	}
}

void APP_receivePassword(void){
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++){
    168e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1690:	8f 5f       	subi	r24, 0xFF	; 255
    1692:	8f 87       	std	Y+15, r24	; 0x0f
    1694:	8f 85       	ldd	r24, Y+15	; 0x0f
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	08 f4       	brcc	.+2      	; 0x169c <APP_receivePassword+0x120>
    169a:	7e cf       	rjmp	.-260    	; 0x1598 <APP_receivePassword+0x1c>
		g_password[i]=UART_receiveByte();
		_delay_ms(10);
	}
	g_sendback++;
    169c:	80 91 81 00 	lds	r24, 0x0081
    16a0:	8f 5f       	subi	r24, 0xFF	; 255
    16a2:	80 93 81 00 	sts	0x0081, r24
}
    16a6:	2f 96       	adiw	r28, 0x0f	; 15
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	08 95       	ret

000016bc <APP_savePasswordInEEPROM>:

void APP_savePasswordInEEPROM(void){
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	0f 92       	push	r0
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	address=1;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a0 e0       	ldi	r26, 0x00	; 0
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	80 93 69 00 	sts	0x0069, r24
    16d2:	90 93 6a 00 	sts	0x006A, r25
    16d6:	a0 93 6b 00 	sts	0x006B, r26
    16da:	b0 93 6c 00 	sts	0x006C, r27
	for(i=0;i<PASSWORD_SIZE;i++){
    16de:	19 82       	std	Y+1, r1	; 0x01
    16e0:	11 c0       	rjmp	.+34     	; 0x1704 <APP_savePasswordInEEPROM+0x48>
		g_passwordConfirm[i]=g_password[i];
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	fc 01       	movw	r30, r24
    16f0:	ea 57       	subi	r30, 0x7A	; 122
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 81       	ld	r24, Z
    16f6:	f9 01       	movw	r30, r18
    16f8:	e4 57       	subi	r30, 0x74	; 116
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 83       	st	Z, r24
}

void APP_savePasswordInEEPROM(void){
	uint8 i;
	address=1;
	for(i=0;i<PASSWORD_SIZE;i++){
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	8f 5f       	subi	r24, 0xFF	; 255
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	83 30       	cpi	r24, 0x03	; 3
    1708:	60 f3       	brcs	.-40     	; 0x16e2 <APP_savePasswordInEEPROM+0x26>
		g_passwordConfirm[i]=g_password[i];
	}
}
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <APP_confirmPassword2>:
	EEPROM_writeByte(address,g_password[2]);
	_delay_ms(10);

}
*/
uint8 APP_confirmPassword2(void){
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	00 d0       	rcall	.+0      	; 0x1718 <APP_confirmPassword2+0x6>
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
	uint8 statuss=0;
    171c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 i;
	address=0x0311;
    171e:	81 e1       	ldi	r24, 0x11	; 17
    1720:	93 e0       	ldi	r25, 0x03	; 3
    1722:	a0 e0       	ldi	r26, 0x00	; 0
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	80 93 69 00 	sts	0x0069, r24
    172a:	90 93 6a 00 	sts	0x006A, r25
    172e:	a0 93 6b 00 	sts	0x006B, r26
    1732:	b0 93 6c 00 	sts	0x006C, r27


	//EEPROM_readByte(address,&g_passwordConfirm[0]);

	if(g_password[0] != g_passwordConfirm[0]){
    1736:	90 91 86 00 	lds	r25, 0x0086
    173a:	80 91 8c 00 	lds	r24, 0x008C
    173e:	98 17       	cp	r25, r24
    1740:	19 f0       	breq	.+6      	; 0x1748 <APP_confirmPassword2+0x36>
		statuss++;
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	8f 5f       	subi	r24, 0xFF	; 255
    1746:	8a 83       	std	Y+2, r24	; 0x02
	}
	address++;
    1748:	80 91 69 00 	lds	r24, 0x0069
    174c:	90 91 6a 00 	lds	r25, 0x006A
    1750:	a0 91 6b 00 	lds	r26, 0x006B
    1754:	b0 91 6c 00 	lds	r27, 0x006C
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	a1 1d       	adc	r26, r1
    175c:	b1 1d       	adc	r27, r1
    175e:	80 93 69 00 	sts	0x0069, r24
    1762:	90 93 6a 00 	sts	0x006A, r25
    1766:	a0 93 6b 00 	sts	0x006B, r26
    176a:	b0 93 6c 00 	sts	0x006C, r27
	//_delay_ms(10);

	//EEPROM_readByte(address,&g_passwordConfirm[1]);

	if(g_password[1] != g_passwordConfirm[1]){
    176e:	90 91 87 00 	lds	r25, 0x0087
    1772:	80 91 8d 00 	lds	r24, 0x008D
    1776:	98 17       	cp	r25, r24
    1778:	19 f0       	breq	.+6      	; 0x1780 <APP_confirmPassword2+0x6e>
		statuss++;
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	8f 5f       	subi	r24, 0xFF	; 255
    177e:	8a 83       	std	Y+2, r24	; 0x02
	}
	address++;
    1780:	80 91 69 00 	lds	r24, 0x0069
    1784:	90 91 6a 00 	lds	r25, 0x006A
    1788:	a0 91 6b 00 	lds	r26, 0x006B
    178c:	b0 91 6c 00 	lds	r27, 0x006C
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	a1 1d       	adc	r26, r1
    1794:	b1 1d       	adc	r27, r1
    1796:	80 93 69 00 	sts	0x0069, r24
    179a:	90 93 6a 00 	sts	0x006A, r25
    179e:	a0 93 6b 00 	sts	0x006B, r26
    17a2:	b0 93 6c 00 	sts	0x006C, r27
	//_delay_ms(10);

	//EEPROM_readByte(address,&g_passwordConfirm[2]);

	if(g_password[2] != g_passwordConfirm[2]){
    17a6:	90 91 88 00 	lds	r25, 0x0088
    17aa:	80 91 8e 00 	lds	r24, 0x008E
    17ae:	98 17       	cp	r25, r24
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <APP_confirmPassword2+0xa6>
		statuss++;
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	8f 5f       	subi	r24, 0xFF	; 255
    17b6:	8a 83       	std	Y+2, r24	; 0x02
	}
	address++;
    17b8:	80 91 69 00 	lds	r24, 0x0069
    17bc:	90 91 6a 00 	lds	r25, 0x006A
    17c0:	a0 91 6b 00 	lds	r26, 0x006B
    17c4:	b0 91 6c 00 	lds	r27, 0x006C
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	a1 1d       	adc	r26, r1
    17cc:	b1 1d       	adc	r27, r1
    17ce:	80 93 69 00 	sts	0x0069, r24
    17d2:	90 93 6a 00 	sts	0x006A, r25
    17d6:	a0 93 6b 00 	sts	0x006B, r26
    17da:	b0 93 6c 00 	sts	0x006C, r27

	//_delay_ms(10);

	//LCD_clearScreen();
	//LCD_integerToString(statuss);
	return statuss;
    17de:	8a 81       	ldd	r24, Y+2	; 0x02

}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <APP_Buzzer>:

void APP_Buzzer(void){
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
	g_ticks=0;
    17f2:	10 92 80 00 	sts	0x0080, r1
	Buzzer_on();
    17f6:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
	while(g_ticks<30);
    17fa:	80 91 80 00 	lds	r24, 0x0080
    17fe:	8e 31       	cpi	r24, 0x1E	; 30
    1800:	e0 f3       	brcs	.-8      	; 0x17fa <APP_Buzzer+0x10>
	Buzzer_off();
    1802:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
}
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <APP_setTimer1CallBackFunction>:

void APP_setTimer1CallBackFunction(void){
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    1814:	80 91 80 00 	lds	r24, 0x0080
    1818:	8f 5f       	subi	r24, 0xFF	; 255
    181a:	80 93 80 00 	sts	0x0080, r24
}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <DCMotor_init>:
#include"dcmotor.h"
#include"gpio.h"
#include<avr/io.h>
#include"timer1.h"

void DCMotor_init(void){
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_ID,MOTOR_PIN1_ID,PIN_OUTPUT);
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID,MOTOR_PIN2_ID,PIN_OUTPUT);
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_PORT_ID,MOTOR_PIN1_ID, 0);
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID,MOTOR_PIN2_ID, 0);/*stop motor at the beginning*/
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	61 e0       	ldi	r22, 0x01	; 1
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <GPIO_writePin>
}
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <PWM_Timer0_Start>:

void PWM_Timer0_Start(uint8 duty_cycle){
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	0f 92       	push	r0
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    1866:	e2 e5       	ldi	r30, 0x52	; 82
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	10 82       	st	Z, r1
	OCR0= duty_cycle;
    186c:	ec e5       	ldi	r30, 0x5C	; 92
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	63 e0       	ldi	r22, 0x03	; 3
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <GPIO_setupPinDirection>
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    187e:	e3 e5       	ldi	r30, 0x53	; 83
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8a e6       	ldi	r24, 0x6A	; 106
    1884:	80 83       	st	Z, r24
}
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <DCMotor_rotate>:

void DCMotor_rotate(uint8 speed,DCMotor_State state){
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <DCMotor_rotate+0x6>
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	6a 83       	std	Y+2, r22	; 0x02
	PORTB = (PORTB & 0xFC);
    189c:	a8 e3       	ldi	r26, 0x38	; 56
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e8 e3       	ldi	r30, 0x38	; 56
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	8c 7f       	andi	r24, 0xFC	; 252
    18a8:	8c 93       	st	X, r24
	PORTB|=state;
    18aa:	a8 e3       	ldi	r26, 0x38	; 56
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e8 e3       	ldi	r30, 0x38	; 56
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	90 81       	ld	r25, Z
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	89 2b       	or	r24, r25
    18b8:	8c 93       	st	X, r24
	// PWM_Timer0_Start((MOTOR_MAX_SPEED*speed)/100);
	PWM_Timer0_Start(255);
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	0e 94 2d 0c 	call	0x185a	; 0x185a <PWM_Timer0_Start>
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <EEPROM_writeByte>:
#include"eeprom.h"
#include"i2c.h"

uint8 EEPROM_writeByte(uint16 address,uint8 data){
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <EEPROM_writeByte+0x6>
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <EEPROM_writeByte+0x8>
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	6b 83       	std	Y+3, r22	; 0x03
	I2C_start();
    18dc:	0e 94 81 10 	call	0x2102	; 0x2102 <I2C_start>
	if (I2C_getStatus() != TWI_START)
    18e0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_getStatus>
    18e4:	88 30       	cpi	r24, 0x08	; 8
    18e6:	11 f0       	breq	.+4      	; 0x18ec <EEPROM_writeByte+0x22>
		return ERROR;
    18e8:	1c 82       	std	Y+4, r1	; 0x04
    18ea:	28 c0       	rjmp	.+80     	; 0x193c <EEPROM_writeByte+0x72>

	I2C_writeByte((uint8)(0xA0 | ((address & 0x0700)>>7)));
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	9a 81       	ldd	r25, Y+2	; 0x02
    18f0:	80 70       	andi	r24, 0x00	; 0
    18f2:	97 70       	andi	r25, 0x07	; 7
    18f4:	88 0f       	add	r24, r24
    18f6:	89 2f       	mov	r24, r25
    18f8:	88 1f       	adc	r24, r24
    18fa:	99 0b       	sbc	r25, r25
    18fc:	91 95       	neg	r25
    18fe:	80 6a       	ori	r24, 0xA0	; 160
    1900:	0e 94 9c 10 	call	0x2138	; 0x2138 <I2C_writeByte>
	if (I2C_getStatus() != TWI_MT_SLA_W_ACK)
    1904:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_getStatus>
    1908:	88 31       	cpi	r24, 0x18	; 24
    190a:	11 f0       	breq	.+4      	; 0x1910 <EEPROM_writeByte+0x46>
		return ERROR;
    190c:	1c 82       	std	Y+4, r1	; 0x04
    190e:	16 c0       	rjmp	.+44     	; 0x193c <EEPROM_writeByte+0x72>

	I2C_writeByte((uint8)(address));
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	0e 94 9c 10 	call	0x2138	; 0x2138 <I2C_writeByte>
	if (I2C_getStatus() != TWI_MT_DATA_ACK)
    1916:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_getStatus>
    191a:	88 32       	cpi	r24, 0x28	; 40
    191c:	11 f0       	breq	.+4      	; 0x1922 <EEPROM_writeByte+0x58>
		return ERROR;
    191e:	1c 82       	std	Y+4, r1	; 0x04
    1920:	0d c0       	rjmp	.+26     	; 0x193c <EEPROM_writeByte+0x72>


	I2C_writeByte(data);
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	0e 94 9c 10 	call	0x2138	; 0x2138 <I2C_writeByte>
	if (I2C_getStatus() != TWI_MT_DATA_ACK)
    1928:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_getStatus>
    192c:	88 32       	cpi	r24, 0x28	; 40
    192e:	11 f0       	breq	.+4      	; 0x1934 <EEPROM_writeByte+0x6a>
		return ERROR;
    1930:	1c 82       	std	Y+4, r1	; 0x04
    1932:	04 c0       	rjmp	.+8      	; 0x193c <EEPROM_writeByte+0x72>

	I2C_stop();
    1934:	0e 94 91 10 	call	0x2122	; 0x2122 <I2C_stop>

	return SUCCESS;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	8c 83       	std	Y+4, r24	; 0x04
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 address,uint8 *data){
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <EEPROM_readByte+0x6>
    1952:	00 d0       	rcall	.+0      	; 0x1954 <EEPROM_readByte+0x8>
    1954:	0f 92       	push	r0
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	9a 83       	std	Y+2, r25	; 0x02
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	7c 83       	std	Y+4, r23	; 0x04
    1960:	6b 83       	std	Y+3, r22	; 0x03
	I2C_start();
    1962:	0e 94 81 10 	call	0x2102	; 0x2102 <I2C_start>
	if (I2C_getStatus() != TWI_START)
    1966:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_getStatus>
    196a:	88 30       	cpi	r24, 0x08	; 8
    196c:	11 f0       	breq	.+4      	; 0x1972 <EEPROM_readByte+0x26>
		return ERROR;
    196e:	1d 82       	std	Y+5, r1	; 0x05
    1970:	44 c0       	rjmp	.+136    	; 0x19fa <EEPROM_readByte+0xae>

	I2C_writeByte((uint8)((0xA0) | ((address & 0x0700)>>7)));
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	80 70       	andi	r24, 0x00	; 0
    1978:	97 70       	andi	r25, 0x07	; 7
    197a:	88 0f       	add	r24, r24
    197c:	89 2f       	mov	r24, r25
    197e:	88 1f       	adc	r24, r24
    1980:	99 0b       	sbc	r25, r25
    1982:	91 95       	neg	r25
    1984:	80 6a       	ori	r24, 0xA0	; 160
    1986:	0e 94 9c 10 	call	0x2138	; 0x2138 <I2C_writeByte>
	if (I2C_getStatus() != TWI_MT_SLA_W_ACK)
    198a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_getStatus>
    198e:	88 31       	cpi	r24, 0x18	; 24
    1990:	11 f0       	breq	.+4      	; 0x1996 <EEPROM_readByte+0x4a>
		return ERROR;
    1992:	1d 82       	std	Y+5, r1	; 0x05
    1994:	32 c0       	rjmp	.+100    	; 0x19fa <EEPROM_readByte+0xae>

	I2C_writeByte((uint8)(address));
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	0e 94 9c 10 	call	0x2138	; 0x2138 <I2C_writeByte>
	if (I2C_getStatus() != TWI_MT_DATA_ACK)
    199c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_getStatus>
    19a0:	88 32       	cpi	r24, 0x28	; 40
    19a2:	11 f0       	breq	.+4      	; 0x19a8 <EEPROM_readByte+0x5c>
		return ERROR;
    19a4:	1d 82       	std	Y+5, r1	; 0x05
    19a6:	29 c0       	rjmp	.+82     	; 0x19fa <EEPROM_readByte+0xae>

	I2C_start();
    19a8:	0e 94 81 10 	call	0x2102	; 0x2102 <I2C_start>
	if (I2C_getStatus() != TWI_REP_START)
    19ac:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_getStatus>
    19b0:	80 31       	cpi	r24, 0x10	; 16
    19b2:	11 f0       	breq	.+4      	; 0x19b8 <EEPROM_readByte+0x6c>
		return ERROR;
    19b4:	1d 82       	std	Y+5, r1	; 0x05
    19b6:	21 c0       	rjmp	.+66     	; 0x19fa <EEPROM_readByte+0xae>

	I2C_writeByte((uint8)((0xA0) | ((address & 0x0700)>>7) | 1));
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	80 70       	andi	r24, 0x00	; 0
    19be:	97 70       	andi	r25, 0x07	; 7
    19c0:	88 0f       	add	r24, r24
    19c2:	89 2f       	mov	r24, r25
    19c4:	88 1f       	adc	r24, r24
    19c6:	99 0b       	sbc	r25, r25
    19c8:	91 95       	neg	r25
    19ca:	81 6a       	ori	r24, 0xA1	; 161
    19cc:	0e 94 9c 10 	call	0x2138	; 0x2138 <I2C_writeByte>
	if (I2C_getStatus() != TWI_MT_SLA_R_ACK)
    19d0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_getStatus>
    19d4:	80 34       	cpi	r24, 0x40	; 64
    19d6:	11 f0       	breq	.+4      	; 0x19dc <EEPROM_readByte+0x90>
		return ERROR;
    19d8:	1d 82       	std	Y+5, r1	; 0x05
    19da:	0f c0       	rjmp	.+30     	; 0x19fa <EEPROM_readByte+0xae>

	*data = I2C_readByteWithNACK();
    19dc:	0e 94 c6 10 	call	0x218c	; 0x218c <I2C_readByteWithNACK>
    19e0:	eb 81       	ldd	r30, Y+3	; 0x03
    19e2:	fc 81       	ldd	r31, Y+4	; 0x04
    19e4:	80 83       	st	Z, r24
	if (I2C_getStatus() != TWI_MR_DATA_NACK)
    19e6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_getStatus>
    19ea:	88 35       	cpi	r24, 0x58	; 88
    19ec:	11 f0       	breq	.+4      	; 0x19f2 <EEPROM_readByte+0xa6>
		return ERROR;
    19ee:	1d 82       	std	Y+5, r1	; 0x05
    19f0:	04 c0       	rjmp	.+8      	; 0x19fa <EEPROM_readByte+0xae>
	I2C_stop();
    19f2:	0e 94 91 10 	call	0x2122	; 0x2122 <I2C_stop>

	return SUCCESS;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	8d 83       	std	Y+5, r24	; 0x05
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <GPIO_setupPinDirection>:
#include <avr/io.h>
#include "gpio.h"
#include "common_macros.h"

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <GPIO_setupPinDirection+0x6>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <GPIO_setupPinDirection+0x8>
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	6a 83       	std	Y+2, r22	; 0x02
    1a1e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	88 30       	cpi	r24, 0x08	; 8
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <GPIO_setupPinDirection+0x1c>
    1a26:	d5 c0       	rjmp	.+426    	; 0x1bd2 <GPIO_setupPinDirection+0x1c6>
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	84 30       	cpi	r24, 0x04	; 4
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <GPIO_setupPinDirection+0x24>
    1a2e:	d1 c0       	rjmp	.+418    	; 0x1bd2 <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	3d 83       	std	Y+5, r19	; 0x05
    1a38:	2c 83       	std	Y+4, r18	; 0x04
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	91 05       	cpc	r25, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <GPIO_setupPinDirection+0x3a>
    1a44:	43 c0       	rjmp	.+134    	; 0x1acc <GPIO_setupPinDirection+0xc0>
    1a46:	2c 81       	ldd	r18, Y+4	; 0x04
    1a48:	3d 81       	ldd	r19, Y+5	; 0x05
    1a4a:	22 30       	cpi	r18, 0x02	; 2
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <GPIO_setupPinDirection+0x4e>
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	9d 81       	ldd	r25, Y+5	; 0x05
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	71 f0       	breq	.+28     	; 0x1a74 <GPIO_setupPinDirection+0x68>
    1a58:	bc c0       	rjmp	.+376    	; 0x1bd2 <GPIO_setupPinDirection+0x1c6>
    1a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a5e:	22 30       	cpi	r18, 0x02	; 2
    1a60:	31 05       	cpc	r19, r1
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <GPIO_setupPinDirection+0x5a>
    1a64:	5f c0       	rjmp	.+190    	; 0x1b24 <GPIO_setupPinDirection+0x118>
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <GPIO_setupPinDirection+0x66>
    1a70:	85 c0       	rjmp	.+266    	; 0x1b7c <GPIO_setupPinDirection+0x170>
    1a72:	af c0       	rjmp	.+350    	; 0x1bd2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	a1 f4       	brne	.+40     	; 0x1aa2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1a7a:	aa e3       	ldi	r26, 0x3A	; 58
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	ea e3       	ldi	r30, 0x3A	; 58
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 2e       	mov	r0, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <GPIO_setupPinDirection+0x8c>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <GPIO_setupPinDirection+0x88>
    1a9c:	84 2b       	or	r24, r20
    1a9e:	8c 93       	st	X, r24
    1aa0:	98 c0       	rjmp	.+304    	; 0x1bd2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1aa2:	aa e3       	ldi	r26, 0x3A	; 58
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	ea e3       	ldi	r30, 0x3A	; 58
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	48 2f       	mov	r20, r24
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	02 2e       	mov	r0, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <GPIO_setupPinDirection+0xb4>
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	0a 94       	dec	r0
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <GPIO_setupPinDirection+0xb0>
    1ac4:	80 95       	com	r24
    1ac6:	84 23       	and	r24, r20
    1ac8:	8c 93       	st	X, r24
    1aca:	83 c0       	rjmp	.+262    	; 0x1bd2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	a1 f4       	brne	.+40     	; 0x1afa <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1ad2:	a7 e3       	ldi	r26, 0x37	; 55
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e7 e3       	ldi	r30, 0x37	; 55
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	48 2f       	mov	r20, r24
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	02 2e       	mov	r0, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <GPIO_setupPinDirection+0xe4>
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	0a 94       	dec	r0
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <GPIO_setupPinDirection+0xe0>
    1af4:	84 2b       	or	r24, r20
    1af6:	8c 93       	st	X, r24
    1af8:	6c c0       	rjmp	.+216    	; 0x1bd2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1afa:	a7 e3       	ldi	r26, 0x37	; 55
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e7 e3       	ldi	r30, 0x37	; 55
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 2e       	mov	r0, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <GPIO_setupPinDirection+0x10c>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <GPIO_setupPinDirection+0x108>
    1b1c:	80 95       	com	r24
    1b1e:	84 23       	and	r24, r20
    1b20:	8c 93       	st	X, r24
    1b22:	57 c0       	rjmp	.+174    	; 0x1bd2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	a1 f4       	brne	.+40     	; 0x1b52 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1b2a:	a4 e3       	ldi	r26, 0x34	; 52
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e4 e3       	ldi	r30, 0x34	; 52
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <GPIO_setupPinDirection+0x13c>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <GPIO_setupPinDirection+0x138>
    1b4c:	84 2b       	or	r24, r20
    1b4e:	8c 93       	st	X, r24
    1b50:	40 c0       	rjmp	.+128    	; 0x1bd2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1b52:	a4 e3       	ldi	r26, 0x34	; 52
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e4 e3       	ldi	r30, 0x34	; 52
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	48 2f       	mov	r20, r24
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 2e       	mov	r0, r18
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <GPIO_setupPinDirection+0x164>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	0a 94       	dec	r0
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <GPIO_setupPinDirection+0x160>
    1b74:	80 95       	com	r24
    1b76:	84 23       	and	r24, r20
    1b78:	8c 93       	st	X, r24
    1b7a:	2b c0       	rjmp	.+86     	; 0x1bd2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	a1 f4       	brne	.+40     	; 0x1baa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1b82:	a1 e3       	ldi	r26, 0x31	; 49
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e1 e3       	ldi	r30, 0x31	; 49
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	48 2f       	mov	r20, r24
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	02 2e       	mov	r0, r18
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <GPIO_setupPinDirection+0x194>
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	0a 94       	dec	r0
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <GPIO_setupPinDirection+0x190>
    1ba4:	84 2b       	or	r24, r20
    1ba6:	8c 93       	st	X, r24
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1baa:	a1 e3       	ldi	r26, 0x31	; 49
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e1 e3       	ldi	r30, 0x31	; 49
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <GPIO_setupPinDirection+0x1bc>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <GPIO_setupPinDirection+0x1b8>
    1bcc:	80 95       	com	r24
    1bce:	84 23       	and	r24, r20
    1bd0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <GPIO_writePin>:

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <GPIO_writePin+0x6>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <GPIO_writePin+0x8>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	6a 83       	std	Y+2, r22	; 0x02
    1bf4:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	88 30       	cpi	r24, 0x08	; 8
    1bfa:	08 f0       	brcs	.+2      	; 0x1bfe <GPIO_writePin+0x1c>
    1bfc:	d5 c0       	rjmp	.+426    	; 0x1da8 <GPIO_writePin+0x1c6>
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	84 30       	cpi	r24, 0x04	; 4
    1c02:	08 f0       	brcs	.+2      	; 0x1c06 <GPIO_writePin+0x24>
    1c04:	d1 c0       	rjmp	.+418    	; 0x1da8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{

		switch(port_num)
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	3d 83       	std	Y+5, r19	; 0x05
    1c0e:	2c 83       	std	Y+4, r18	; 0x04
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	91 05       	cpc	r25, r1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <GPIO_writePin+0x3a>
    1c1a:	43 c0       	rjmp	.+134    	; 0x1ca2 <GPIO_writePin+0xc0>
    1c1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c20:	22 30       	cpi	r18, 0x02	; 2
    1c22:	31 05       	cpc	r19, r1
    1c24:	2c f4       	brge	.+10     	; 0x1c30 <GPIO_writePin+0x4e>
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	71 f0       	breq	.+28     	; 0x1c4a <GPIO_writePin+0x68>
    1c2e:	bc c0       	rjmp	.+376    	; 0x1da8 <GPIO_writePin+0x1c6>
    1c30:	2c 81       	ldd	r18, Y+4	; 0x04
    1c32:	3d 81       	ldd	r19, Y+5	; 0x05
    1c34:	22 30       	cpi	r18, 0x02	; 2
    1c36:	31 05       	cpc	r19, r1
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <GPIO_writePin+0x5a>
    1c3a:	5f c0       	rjmp	.+190    	; 0x1cfa <GPIO_writePin+0x118>
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c40:	83 30       	cpi	r24, 0x03	; 3
    1c42:	91 05       	cpc	r25, r1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <GPIO_writePin+0x66>
    1c46:	85 c0       	rjmp	.+266    	; 0x1d52 <GPIO_writePin+0x170>
    1c48:	af c0       	rjmp	.+350    	; 0x1da8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	a1 f4       	brne	.+40     	; 0x1c78 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1c50:	ab e3       	ldi	r26, 0x3B	; 59
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	eb e3       	ldi	r30, 0x3B	; 59
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <GPIO_writePin+0x8c>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <GPIO_writePin+0x88>
    1c72:	84 2b       	or	r24, r20
    1c74:	8c 93       	st	X, r24
    1c76:	98 c0       	rjmp	.+304    	; 0x1da8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1c78:	ab e3       	ldi	r26, 0x3B	; 59
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	eb e3       	ldi	r30, 0x3B	; 59
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <GPIO_writePin+0xb4>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <GPIO_writePin+0xb0>
    1c9a:	80 95       	com	r24
    1c9c:	84 23       	and	r24, r20
    1c9e:	8c 93       	st	X, r24
    1ca0:	83 c0       	rjmp	.+262    	; 0x1da8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	a1 f4       	brne	.+40     	; 0x1cd0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ca8:	a8 e3       	ldi	r26, 0x38	; 56
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e8 e3       	ldi	r30, 0x38	; 56
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <GPIO_writePin+0xe4>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <GPIO_writePin+0xe0>
    1cca:	84 2b       	or	r24, r20
    1ccc:	8c 93       	st	X, r24
    1cce:	6c c0       	rjmp	.+216    	; 0x1da8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1cd0:	a8 e3       	ldi	r26, 0x38	; 56
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e8 e3       	ldi	r30, 0x38	; 56
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 2e       	mov	r0, r18
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <GPIO_writePin+0x10c>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	0a 94       	dec	r0
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <GPIO_writePin+0x108>
    1cf2:	80 95       	com	r24
    1cf4:	84 23       	and	r24, r20
    1cf6:	8c 93       	st	X, r24
    1cf8:	57 c0       	rjmp	.+174    	; 0x1da8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	a1 f4       	brne	.+40     	; 0x1d28 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d00:	a5 e3       	ldi	r26, 0x35	; 53
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e5 e3       	ldi	r30, 0x35	; 53
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <GPIO_writePin+0x13c>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <GPIO_writePin+0x138>
    1d22:	84 2b       	or	r24, r20
    1d24:	8c 93       	st	X, r24
    1d26:	40 c0       	rjmp	.+128    	; 0x1da8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1d28:	a5 e3       	ldi	r26, 0x35	; 53
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e5 e3       	ldi	r30, 0x35	; 53
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	48 2f       	mov	r20, r24
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	02 2e       	mov	r0, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <GPIO_writePin+0x164>
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	0a 94       	dec	r0
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <GPIO_writePin+0x160>
    1d4a:	80 95       	com	r24
    1d4c:	84 23       	and	r24, r20
    1d4e:	8c 93       	st	X, r24
    1d50:	2b c0       	rjmp	.+86     	; 0x1da8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	a1 f4       	brne	.+40     	; 0x1d80 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1d58:	a2 e3       	ldi	r26, 0x32	; 50
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e2 e3       	ldi	r30, 0x32	; 50
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 2e       	mov	r0, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <GPIO_writePin+0x194>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0a 94       	dec	r0
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <GPIO_writePin+0x190>
    1d7a:	84 2b       	or	r24, r20
    1d7c:	8c 93       	st	X, r24
    1d7e:	14 c0       	rjmp	.+40     	; 0x1da8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1d80:	a2 e3       	ldi	r26, 0x32	; 50
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e2 e3       	ldi	r30, 0x32	; 50
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <GPIO_writePin+0x1bc>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <GPIO_writePin+0x1b8>
    1da2:	80 95       	com	r24
    1da4:	84 23       	and	r24, r20
    1da6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <GPIO_readPin+0x6>
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <GPIO_readPin+0x8>
    1dc0:	0f 92       	push	r0
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
    1dc8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1dca:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	88 30       	cpi	r24, 0x08	; 8
    1dd0:	08 f0       	brcs	.+2      	; 0x1dd4 <GPIO_readPin+0x1c>
    1dd2:	84 c0       	rjmp	.+264    	; 0x1edc <GPIO_readPin+0x124>
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	84 30       	cpi	r24, 0x04	; 4
    1dd8:	08 f0       	brcs	.+2      	; 0x1ddc <GPIO_readPin+0x24>
    1dda:	80 c0       	rjmp	.+256    	; 0x1edc <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	3d 83       	std	Y+5, r19	; 0x05
    1de4:	2c 83       	std	Y+4, r18	; 0x04
    1de6:	4c 81       	ldd	r20, Y+4	; 0x04
    1de8:	5d 81       	ldd	r21, Y+5	; 0x05
    1dea:	41 30       	cpi	r20, 0x01	; 1
    1dec:	51 05       	cpc	r21, r1
    1dee:	79 f1       	breq	.+94     	; 0x1e4e <GPIO_readPin+0x96>
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	82 30       	cpi	r24, 0x02	; 2
    1df6:	91 05       	cpc	r25, r1
    1df8:	34 f4       	brge	.+12     	; 0x1e06 <GPIO_readPin+0x4e>
    1dfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfe:	21 15       	cp	r18, r1
    1e00:	31 05       	cpc	r19, r1
    1e02:	69 f0       	breq	.+26     	; 0x1e1e <GPIO_readPin+0x66>
    1e04:	6b c0       	rjmp	.+214    	; 0x1edc <GPIO_readPin+0x124>
    1e06:	4c 81       	ldd	r20, Y+4	; 0x04
    1e08:	5d 81       	ldd	r21, Y+5	; 0x05
    1e0a:	42 30       	cpi	r20, 0x02	; 2
    1e0c:	51 05       	cpc	r21, r1
    1e0e:	b9 f1       	breq	.+110    	; 0x1e7e <GPIO_readPin+0xc6>
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	9d 81       	ldd	r25, Y+5	; 0x05
    1e14:	83 30       	cpi	r24, 0x03	; 3
    1e16:	91 05       	cpc	r25, r1
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <GPIO_readPin+0x64>
    1e1a:	49 c0       	rjmp	.+146    	; 0x1eae <GPIO_readPin+0xf6>
    1e1c:	5f c0       	rjmp	.+190    	; 0x1edc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1e1e:	e9 e3       	ldi	r30, 0x39	; 57
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a9 01       	movw	r20, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <GPIO_readPin+0x7e>
    1e32:	55 95       	asr	r21
    1e34:	47 95       	ror	r20
    1e36:	8a 95       	dec	r24
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <GPIO_readPin+0x7a>
    1e3a:	ca 01       	movw	r24, r20
    1e3c:	81 70       	andi	r24, 0x01	; 1
    1e3e:	90 70       	andi	r25, 0x00	; 0
    1e40:	88 23       	and	r24, r24
    1e42:	19 f0       	breq	.+6      	; 0x1e4a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	49 c0       	rjmp	.+146    	; 0x1edc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e4a:	19 82       	std	Y+1, r1	; 0x01
    1e4c:	47 c0       	rjmp	.+142    	; 0x1edc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1e4e:	e6 e3       	ldi	r30, 0x36	; 54
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	88 2f       	mov	r24, r24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	a9 01       	movw	r20, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <GPIO_readPin+0xae>
    1e62:	55 95       	asr	r21
    1e64:	47 95       	ror	r20
    1e66:	8a 95       	dec	r24
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <GPIO_readPin+0xaa>
    1e6a:	ca 01       	movw	r24, r20
    1e6c:	81 70       	andi	r24, 0x01	; 1
    1e6e:	90 70       	andi	r25, 0x00	; 0
    1e70:	88 23       	and	r24, r24
    1e72:	19 f0       	breq	.+6      	; 0x1e7a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	31 c0       	rjmp	.+98     	; 0x1edc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e7a:	19 82       	std	Y+1, r1	; 0x01
    1e7c:	2f c0       	rjmp	.+94     	; 0x1edc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1e7e:	e3 e3       	ldi	r30, 0x33	; 51
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a9 01       	movw	r20, r18
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <GPIO_readPin+0xde>
    1e92:	55 95       	asr	r21
    1e94:	47 95       	ror	r20
    1e96:	8a 95       	dec	r24
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <GPIO_readPin+0xda>
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	81 70       	andi	r24, 0x01	; 1
    1e9e:	90 70       	andi	r25, 0x00	; 0
    1ea0:	88 23       	and	r24, r24
    1ea2:	19 f0       	breq	.+6      	; 0x1eaa <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    1ea8:	19 c0       	rjmp	.+50     	; 0x1edc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
    1eac:	17 c0       	rjmp	.+46     	; 0x1edc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1eae:	e0 e3       	ldi	r30, 0x30	; 48
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a9 01       	movw	r20, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <GPIO_readPin+0x10e>
    1ec2:	55 95       	asr	r21
    1ec4:	47 95       	ror	r20
    1ec6:	8a 95       	dec	r24
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <GPIO_readPin+0x10a>
    1eca:	ca 01       	movw	r24, r20
    1ecc:	81 70       	andi	r24, 0x01	; 1
    1ece:	90 70       	andi	r25, 0x00	; 0
    1ed0:	88 23       	and	r24, r24
    1ed2:	19 f0       	breq	.+6      	; 0x1eda <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1eda:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <GPIO_setupPortDirection+0x6>
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <GPIO_setupPortDirection+0x8>
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	84 30       	cpi	r24, 0x04	; 4
    1f02:	90 f5       	brcc	.+100    	; 0x1f68 <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	3c 83       	std	Y+4, r19	; 0x04
    1f0c:	2b 83       	std	Y+3, r18	; 0x03
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	81 30       	cpi	r24, 0x01	; 1
    1f14:	91 05       	cpc	r25, r1
    1f16:	d1 f0       	breq	.+52     	; 0x1f4c <GPIO_setupPortDirection+0x5e>
    1f18:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1c:	22 30       	cpi	r18, 0x02	; 2
    1f1e:	31 05       	cpc	r19, r1
    1f20:	2c f4       	brge	.+10     	; 0x1f2c <GPIO_setupPortDirection+0x3e>
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	61 f0       	breq	.+24     	; 0x1f42 <GPIO_setupPortDirection+0x54>
    1f2a:	1e c0       	rjmp	.+60     	; 0x1f68 <GPIO_setupPortDirection+0x7a>
    1f2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f30:	22 30       	cpi	r18, 0x02	; 2
    1f32:	31 05       	cpc	r19, r1
    1f34:	81 f0       	breq	.+32     	; 0x1f56 <GPIO_setupPortDirection+0x68>
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	83 30       	cpi	r24, 0x03	; 3
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	81 f0       	breq	.+32     	; 0x1f60 <GPIO_setupPortDirection+0x72>
    1f40:	13 c0       	rjmp	.+38     	; 0x1f68 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1f42:	ea e3       	ldi	r30, 0x3A	; 58
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	80 83       	st	Z, r24
    1f4a:	0e c0       	rjmp	.+28     	; 0x1f68 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1f4c:	e7 e3       	ldi	r30, 0x37	; 55
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	80 83       	st	Z, r24
    1f54:	09 c0       	rjmp	.+18     	; 0x1f68 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1f56:	e4 e3       	ldi	r30, 0x34	; 52
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	80 83       	st	Z, r24
    1f5e:	04 c0       	rjmp	.+8      	; 0x1f68 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1f60:	e1 e3       	ldi	r30, 0x31	; 49
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <GPIO_writePort>:

void GPIO_writePort(uint8 port_num, uint8 value)
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <GPIO_writePort+0x6>
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <GPIO_writePort+0x8>
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	84 30       	cpi	r24, 0x04	; 4
    1f8a:	90 f5       	brcc	.+100    	; 0x1ff0 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	3c 83       	std	Y+4, r19	; 0x04
    1f94:	2b 83       	std	Y+3, r18	; 0x03
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	d1 f0       	breq	.+52     	; 0x1fd4 <GPIO_writePort+0x5e>
    1fa0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa4:	22 30       	cpi	r18, 0x02	; 2
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	2c f4       	brge	.+10     	; 0x1fb4 <GPIO_writePort+0x3e>
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	61 f0       	breq	.+24     	; 0x1fca <GPIO_writePort+0x54>
    1fb2:	1e c0       	rjmp	.+60     	; 0x1ff0 <GPIO_writePort+0x7a>
    1fb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb8:	22 30       	cpi	r18, 0x02	; 2
    1fba:	31 05       	cpc	r19, r1
    1fbc:	81 f0       	breq	.+32     	; 0x1fde <GPIO_writePort+0x68>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	83 30       	cpi	r24, 0x03	; 3
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	81 f0       	breq	.+32     	; 0x1fe8 <GPIO_writePort+0x72>
    1fc8:	13 c0       	rjmp	.+38     	; 0x1ff0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1fca:	eb e3       	ldi	r30, 0x3B	; 59
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	80 83       	st	Z, r24
    1fd2:	0e c0       	rjmp	.+28     	; 0x1ff0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1fd4:	e8 e3       	ldi	r30, 0x38	; 56
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	80 83       	st	Z, r24
    1fdc:	09 c0       	rjmp	.+18     	; 0x1ff0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1fde:	e5 e3       	ldi	r30, 0x35	; 53
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	80 83       	st	Z, r24
    1fe6:	04 c0       	rjmp	.+8      	; 0x1ff0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1fe8:	e2 e3       	ldi	r30, 0x32	; 50
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <GPIO_readPort>:

uint8 GPIO_readPort(uint8 port_num)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <GPIO_readPort+0x6>
    2004:	00 d0       	rcall	.+0      	; 0x2006 <GPIO_readPort+0x8>
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    200c:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	84 30       	cpi	r24, 0x04	; 4
    2012:	90 f5       	brcc	.+100    	; 0x2078 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	3c 83       	std	Y+4, r19	; 0x04
    201c:	2b 83       	std	Y+3, r18	; 0x03
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	91 05       	cpc	r25, r1
    2026:	d1 f0       	breq	.+52     	; 0x205c <GPIO_readPort+0x5e>
    2028:	2b 81       	ldd	r18, Y+3	; 0x03
    202a:	3c 81       	ldd	r19, Y+4	; 0x04
    202c:	22 30       	cpi	r18, 0x02	; 2
    202e:	31 05       	cpc	r19, r1
    2030:	2c f4       	brge	.+10     	; 0x203c <GPIO_readPort+0x3e>
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	61 f0       	breq	.+24     	; 0x2052 <GPIO_readPort+0x54>
    203a:	1e c0       	rjmp	.+60     	; 0x2078 <GPIO_readPort+0x7a>
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	22 30       	cpi	r18, 0x02	; 2
    2042:	31 05       	cpc	r19, r1
    2044:	81 f0       	breq	.+32     	; 0x2066 <GPIO_readPort+0x68>
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	83 30       	cpi	r24, 0x03	; 3
    204c:	91 05       	cpc	r25, r1
    204e:	81 f0       	breq	.+32     	; 0x2070 <GPIO_readPort+0x72>
    2050:	13 c0       	rjmp	.+38     	; 0x2078 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2052:	e9 e3       	ldi	r30, 0x39	; 57
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	0e c0       	rjmp	.+28     	; 0x2078 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    205c:	e6 e3       	ldi	r30, 0x36	; 54
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	09 c0       	rjmp	.+18     	; 0x2078 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2066:	e3 e3       	ldi	r30, 0x33	; 51
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	04 c0       	rjmp	.+8      	; 0x2078 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2070:	e0 e3       	ldi	r30, 0x30	; 48
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2078:	89 81       	ldd	r24, Y+1	; 0x01
}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <I2C_init>:
#include"i2c.h"
#include<avr/io.h>
#include"common_macros.h"

void I2C_init(const I2C_Config *i2c_config_ptr){
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	00 d0       	rcall	.+0      	; 0x208e <I2C_init+0x6>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <I2C_init+0x8>
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
	uint16 TWBR_value = (uint16)(((F_CPU/i2c_config_ptr->bit_rate)-16)/2);
    2098:	eb 81       	ldd	r30, Y+3	; 0x03
    209a:	fc 81       	ldd	r31, Y+4	; 0x04
    209c:	22 81       	ldd	r18, Z+2	; 0x02
    209e:	33 81       	ldd	r19, Z+3	; 0x03
    20a0:	44 81       	ldd	r20, Z+4	; 0x04
    20a2:	55 81       	ldd	r21, Z+5	; 0x05
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	92 e1       	ldi	r25, 0x12	; 18
    20a8:	aa e7       	ldi	r26, 0x7A	; 122
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    20b4:	da 01       	movw	r26, r20
    20b6:	c9 01       	movw	r24, r18
    20b8:	40 97       	sbiw	r24, 0x10	; 16
    20ba:	a1 09       	sbc	r26, r1
    20bc:	b1 09       	sbc	r27, r1
    20be:	b6 95       	lsr	r27
    20c0:	a7 95       	ror	r26
    20c2:	97 95       	ror	r25
    20c4:	87 95       	ror	r24
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
	TWBR = TWBR_value;
    20ca:	e0 e2       	ldi	r30, 0x20	; 32
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	80 83       	st	Z, r24
	TWSR = 0x00;
    20d2:	e1 e2       	ldi	r30, 0x21	; 33
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	10 82       	st	Z, r1
	TWAR = i2c_config_ptr->address;
    20d8:	a2 e2       	ldi	r26, 0x22	; 34
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	eb 81       	ldd	r30, Y+3	; 0x03
    20de:	fc 81       	ldd	r31, Y+4	; 0x04
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	8c 93       	st	X, r24
	SET_BIT(TWCR,2);
    20e6:	a6 e5       	ldi	r26, 0x56	; 86
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e6 e5       	ldi	r30, 0x56	; 86
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	84 60       	ori	r24, 0x04	; 4
    20f2:	8c 93       	st	X, r24
}
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <I2C_start>:
void I2C_start(void){
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<7) | (1<<5) | (1<<2);
    210a:	e6 e5       	ldi	r30, 0x56	; 86
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	84 ea       	ldi	r24, 0xA4	; 164
    2110:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT)){
    2112:	e6 e5       	ldi	r30, 0x56	; 86
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	88 23       	and	r24, r24
    211a:	dc f7       	brge	.-10     	; 0x2112 <I2C_start+0x10>
		/*wait till start bit is sent*/
	}
}
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <I2C_stop>:
void I2C_stop(void){
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<7) | (1<<4) | (1<<2);
    212a:	e6 e5       	ldi	r30, 0x56	; 86
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	84 e9       	ldi	r24, 0x94	; 148
    2130:	80 83       	st	Z, r24
}
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <I2C_writeByte>:
void I2C_writeByte(uint8 data){
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    2144:	e3 e2       	ldi	r30, 0x23	; 35
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	80 83       	st	Z, r24
	TWCR = (1<<7) | (1<<2);
    214c:	e6 e5       	ldi	r30, 0x56	; 86
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	84 e8       	ldi	r24, 0x84	; 132
    2152:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT)){
    2154:	e6 e5       	ldi	r30, 0x56	; 86
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	88 23       	and	r24, r24
    215c:	dc f7       	brge	.-10     	; 0x2154 <I2C_writeByte+0x1c>
		/*wait till data is sent successfully*/
	}
}
    215e:	0f 90       	pop	r0
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <I2C_readByteWithACK>:
uint8 I2C_readByteWithACK(void){
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<7) | (1<<2) | (1<<6);
    216e:	e6 e5       	ldi	r30, 0x56	; 86
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	84 ec       	ldi	r24, 0xC4	; 196
    2174:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT)){
    2176:	e6 e5       	ldi	r30, 0x56	; 86
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	88 23       	and	r24, r24
    217e:	dc f7       	brge	.-10     	; 0x2176 <I2C_readByteWithACK+0x10>
		/*wait till data is received successfully*/
	}
	return TWDR;
    2180:	e3 e2       	ldi	r30, 0x23	; 35
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <I2C_readByteWithNACK>:
uint8 I2C_readByteWithNACK(void){
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<7) | (1<<2);
    2194:	e6 e5       	ldi	r30, 0x56	; 86
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	84 e8       	ldi	r24, 0x84	; 132
    219a:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT)){
    219c:	e6 e5       	ldi	r30, 0x56	; 86
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	88 23       	and	r24, r24
    21a4:	dc f7       	brge	.-10     	; 0x219c <I2C_readByteWithNACK+0x10>
		/*wait till data is received successfully*/
	}
	return TWDR;
    21a6:	e3 e2       	ldi	r30, 0x23	; 35
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
}
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <I2C_getStatus>:
uint8 I2C_getStatus(void){
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	0f 92       	push	r0
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status = TWSR & (0xF8);
    21bc:	e1 e2       	ldi	r30, 0x21	; 33
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	88 7f       	andi	r24, 0xF8	; 248
    21c4:	89 83       	std	Y+1, r24	; 0x01
	return status;
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <LCD_init>:
#include"gpio.h"
#include"lcd.h"
#include<util/delay.h>
#include"common_macros.h"

void LCD_init(void){
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	2e 97       	sbiw	r28, 0x0e	; 14
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(RS_PORT_ID, RS_PIN_ID, PIN_OUTPUT);
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(E_PORT_ID, E_PIN_ID, PIN_OUTPUT);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	61 e0       	ldi	r22, 0x01	; 1
    21f2:	41 e0       	ldi	r20, 0x01	; 1
    21f4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <GPIO_setupPinDirection>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a0 ea       	ldi	r26, 0xA0	; 160
    21fe:	b1 e4       	ldi	r27, 0x41	; 65
    2200:	8b 87       	std	Y+11, r24	; 0x0b
    2202:	9c 87       	std	Y+12, r25	; 0x0c
    2204:	ad 87       	std	Y+13, r26	; 0x0d
    2206:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2208:	6b 85       	ldd	r22, Y+11	; 0x0b
    220a:	7c 85       	ldd	r23, Y+12	; 0x0c
    220c:	8d 85       	ldd	r24, Y+13	; 0x0d
    220e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4a ef       	ldi	r20, 0xFA	; 250
    2216:	54 e4       	ldi	r21, 0x44	; 68
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	8f 83       	std	Y+7, r24	; 0x07
    2222:	98 87       	std	Y+8, r25	; 0x08
    2224:	a9 87       	std	Y+9, r26	; 0x09
    2226:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e8       	ldi	r20, 0x80	; 128
    2236:	5f e3       	ldi	r21, 0x3F	; 63
    2238:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    223c:	88 23       	and	r24, r24
    223e:	2c f4       	brge	.+10     	; 0x224a <LCD_init+0x7a>
		__ticks = 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9e 83       	std	Y+6, r25	; 0x06
    2246:	8d 83       	std	Y+5, r24	; 0x05
    2248:	3f c0       	rjmp	.+126    	; 0x22c8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    224a:	6f 81       	ldd	r22, Y+7	; 0x07
    224c:	78 85       	ldd	r23, Y+8	; 0x08
    224e:	89 85       	ldd	r24, Y+9	; 0x09
    2250:	9a 85       	ldd	r25, Y+10	; 0x0a
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	3f ef       	ldi	r19, 0xFF	; 255
    2256:	4f e7       	ldi	r20, 0x7F	; 127
    2258:	57 e4       	ldi	r21, 0x47	; 71
    225a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    225e:	18 16       	cp	r1, r24
    2260:	4c f5       	brge	.+82     	; 0x22b4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2262:	6b 85       	ldd	r22, Y+11	; 0x0b
    2264:	7c 85       	ldd	r23, Y+12	; 0x0c
    2266:	8d 85       	ldd	r24, Y+13	; 0x0d
    2268:	9e 85       	ldd	r25, Y+14	; 0x0e
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e2       	ldi	r20, 0x20	; 32
    2270:	51 e4       	ldi	r21, 0x41	; 65
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9e 83       	std	Y+6, r25	; 0x06
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	0f c0       	rjmp	.+30     	; 0x22aa <LCD_init+0xda>
    228c:	88 ec       	ldi	r24, 0xC8	; 200
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9c 83       	std	Y+4, r25	; 0x04
    2292:	8b 83       	std	Y+3, r24	; 0x03
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	9c 81       	ldd	r25, Y+4	; 0x04
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <LCD_init+0xc8>
    229c:	9c 83       	std	Y+4, r25	; 0x04
    229e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	69 f7       	brne	.-38     	; 0x228c <LCD_init+0xbc>
    22b2:	14 c0       	rjmp	.+40     	; 0x22dc <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b4:	6f 81       	ldd	r22, Y+7	; 0x07
    22b6:	78 85       	ldd	r23, Y+8	; 0x08
    22b8:	89 85       	ldd	r24, Y+9	; 0x09
    22ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9e 83       	std	Y+6, r25	; 0x06
    22c6:	8d 83       	std	Y+5, r24	; 0x05
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	9a 83       	std	Y+2, r25	; 0x02
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	9a 81       	ldd	r25, Y+2	; 0x02
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_init+0x104>
    22d8:	9a 83       	std	Y+2, r25	; 0x02
    22da:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	6f ef       	ldi	r22, 0xFF	; 255
    22e0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    22e4:	88 e3       	ldi	r24, 0x38	; 56
    22e6:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_sendCommand>
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    22ea:	8c e0       	ldi	r24, 0x0C	; 12
    22ec:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_sendCommand>
}
    22f6:	2e 96       	adiw	r28, 0x0e	; 14
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <LCD_sendCommand>:

void LCD_sendCommand(uint8 Command)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	e9 97       	sbiw	r28, 0x39	; 57
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(RS_PORT_ID,RS_PIN_ID,LOGIC_LOW);
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <GPIO_writePin>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a0 e8       	ldi	r26, 0x80	; 128
    232e:	bf e3       	ldi	r27, 0x3F	; 63
    2330:	8d ab       	std	Y+53, r24	; 0x35
    2332:	9e ab       	std	Y+54, r25	; 0x36
    2334:	af ab       	std	Y+55, r26	; 0x37
    2336:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2338:	6d a9       	ldd	r22, Y+53	; 0x35
    233a:	7e a9       	ldd	r23, Y+54	; 0x36
    233c:	8f a9       	ldd	r24, Y+55	; 0x37
    233e:	98 ad       	ldd	r25, Y+56	; 0x38
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a ef       	ldi	r20, 0xFA	; 250
    2346:	54 e4       	ldi	r21, 0x44	; 68
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	89 ab       	std	Y+49, r24	; 0x31
    2352:	9a ab       	std	Y+50, r25	; 0x32
    2354:	ab ab       	std	Y+51, r26	; 0x33
    2356:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2358:	69 a9       	ldd	r22, Y+49	; 0x31
    235a:	7a a9       	ldd	r23, Y+50	; 0x32
    235c:	8b a9       	ldd	r24, Y+51	; 0x33
    235e:	9c a9       	ldd	r25, Y+52	; 0x34
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	2c f4       	brge	.+10     	; 0x237a <LCD_sendCommand+0x72>
		__ticks = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	98 ab       	std	Y+48, r25	; 0x30
    2376:	8f a7       	std	Y+47, r24	; 0x2f
    2378:	3f c0       	rjmp	.+126    	; 0x23f8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    237a:	69 a9       	ldd	r22, Y+49	; 0x31
    237c:	7a a9       	ldd	r23, Y+50	; 0x32
    237e:	8b a9       	ldd	r24, Y+51	; 0x33
    2380:	9c a9       	ldd	r25, Y+52	; 0x34
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	3f ef       	ldi	r19, 0xFF	; 255
    2386:	4f e7       	ldi	r20, 0x7F	; 127
    2388:	57 e4       	ldi	r21, 0x47	; 71
    238a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    238e:	18 16       	cp	r1, r24
    2390:	4c f5       	brge	.+82     	; 0x23e4 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2392:	6d a9       	ldd	r22, Y+53	; 0x35
    2394:	7e a9       	ldd	r23, Y+54	; 0x36
    2396:	8f a9       	ldd	r24, Y+55	; 0x37
    2398:	98 ad       	ldd	r25, Y+56	; 0x38
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e2       	ldi	r20, 0x20	; 32
    23a0:	51 e4       	ldi	r21, 0x41	; 65
    23a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	98 ab       	std	Y+48, r25	; 0x30
    23b8:	8f a7       	std	Y+47, r24	; 0x2f
    23ba:	0f c0       	rjmp	.+30     	; 0x23da <LCD_sendCommand+0xd2>
    23bc:	88 ec       	ldi	r24, 0xC8	; 200
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	9e a7       	std	Y+46, r25	; 0x2e
    23c2:	8d a7       	std	Y+45, r24	; 0x2d
    23c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    23c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_sendCommand+0xc0>
    23cc:	9e a7       	std	Y+46, r25	; 0x2e
    23ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d2:	98 a9       	ldd	r25, Y+48	; 0x30
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	98 ab       	std	Y+48, r25	; 0x30
    23d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23da:	8f a5       	ldd	r24, Y+47	; 0x2f
    23dc:	98 a9       	ldd	r25, Y+48	; 0x30
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	69 f7       	brne	.-38     	; 0x23bc <LCD_sendCommand+0xb4>
    23e2:	14 c0       	rjmp	.+40     	; 0x240c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e4:	69 a9       	ldd	r22, Y+49	; 0x31
    23e6:	7a a9       	ldd	r23, Y+50	; 0x32
    23e8:	8b a9       	ldd	r24, Y+51	; 0x33
    23ea:	9c a9       	ldd	r25, Y+52	; 0x34
    23ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	98 ab       	std	Y+48, r25	; 0x30
    23f6:	8f a7       	std	Y+47, r24	; 0x2f
    23f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23fa:	98 a9       	ldd	r25, Y+48	; 0x30
    23fc:	9c a7       	std	Y+44, r25	; 0x2c
    23fe:	8b a7       	std	Y+43, r24	; 0x2b
    2400:	8b a5       	ldd	r24, Y+43	; 0x2b
    2402:	9c a5       	ldd	r25, Y+44	; 0x2c
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <LCD_sendCommand+0xfc>
    2408:	9c a7       	std	Y+44, r25	; 0x2c
    240a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_HIGH);
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	61 e0       	ldi	r22, 0x01	; 1
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <GPIO_writePin>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a0 e8       	ldi	r26, 0x80	; 128
    241c:	bf e3       	ldi	r27, 0x3F	; 63
    241e:	8f a3       	std	Y+39, r24	; 0x27
    2420:	98 a7       	std	Y+40, r25	; 0x28
    2422:	a9 a7       	std	Y+41, r26	; 0x29
    2424:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	6f a1       	ldd	r22, Y+39	; 0x27
    2428:	78 a5       	ldd	r23, Y+40	; 0x28
    242a:	89 a5       	ldd	r24, Y+41	; 0x29
    242c:	9a a5       	ldd	r25, Y+42	; 0x2a
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a ef       	ldi	r20, 0xFA	; 250
    2434:	54 e4       	ldi	r21, 0x44	; 68
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8b a3       	std	Y+35, r24	; 0x23
    2440:	9c a3       	std	Y+36, r25	; 0x24
    2442:	ad a3       	std	Y+37, r26	; 0x25
    2444:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2446:	6b a1       	ldd	r22, Y+35	; 0x23
    2448:	7c a1       	ldd	r23, Y+36	; 0x24
    244a:	8d a1       	ldd	r24, Y+37	; 0x25
    244c:	9e a1       	ldd	r25, Y+38	; 0x26
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5f e3       	ldi	r21, 0x3F	; 63
    2456:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    245a:	88 23       	and	r24, r24
    245c:	2c f4       	brge	.+10     	; 0x2468 <LCD_sendCommand+0x160>
		__ticks = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9a a3       	std	Y+34, r25	; 0x22
    2464:	89 a3       	std	Y+33, r24	; 0x21
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2468:	6b a1       	ldd	r22, Y+35	; 0x23
    246a:	7c a1       	ldd	r23, Y+36	; 0x24
    246c:	8d a1       	ldd	r24, Y+37	; 0x25
    246e:	9e a1       	ldd	r25, Y+38	; 0x26
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	3f ef       	ldi	r19, 0xFF	; 255
    2474:	4f e7       	ldi	r20, 0x7F	; 127
    2476:	57 e4       	ldi	r21, 0x47	; 71
    2478:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247c:	18 16       	cp	r1, r24
    247e:	4c f5       	brge	.+82     	; 0x24d2 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	6f a1       	ldd	r22, Y+39	; 0x27
    2482:	78 a5       	ldd	r23, Y+40	; 0x28
    2484:	89 a5       	ldd	r24, Y+41	; 0x29
    2486:	9a a5       	ldd	r25, Y+42	; 0x2a
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9a a3       	std	Y+34, r25	; 0x22
    24a6:	89 a3       	std	Y+33, r24	; 0x21
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <LCD_sendCommand+0x1c0>
    24aa:	88 ec       	ldi	r24, 0xC8	; 200
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	98 a3       	std	Y+32, r25	; 0x20
    24b0:	8f 8f       	std	Y+31, r24	; 0x1f
    24b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24b4:	98 a1       	ldd	r25, Y+32	; 0x20
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <LCD_sendCommand+0x1ae>
    24ba:	98 a3       	std	Y+32, r25	; 0x20
    24bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24be:	89 a1       	ldd	r24, Y+33	; 0x21
    24c0:	9a a1       	ldd	r25, Y+34	; 0x22
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	9a a3       	std	Y+34, r25	; 0x22
    24c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c8:	89 a1       	ldd	r24, Y+33	; 0x21
    24ca:	9a a1       	ldd	r25, Y+34	; 0x22
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	69 f7       	brne	.-38     	; 0x24aa <LCD_sendCommand+0x1a2>
    24d0:	14 c0       	rjmp	.+40     	; 0x24fa <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d2:	6b a1       	ldd	r22, Y+35	; 0x23
    24d4:	7c a1       	ldd	r23, Y+36	; 0x24
    24d6:	8d a1       	ldd	r24, Y+37	; 0x25
    24d8:	9e a1       	ldd	r25, Y+38	; 0x26
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9a a3       	std	Y+34, r25	; 0x22
    24e4:	89 a3       	std	Y+33, r24	; 0x21
    24e6:	89 a1       	ldd	r24, Y+33	; 0x21
    24e8:	9a a1       	ldd	r25, Y+34	; 0x22
    24ea:	9e 8f       	std	Y+30, r25	; 0x1e
    24ec:	8d 8f       	std	Y+29, r24	; 0x1d
    24ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_sendCommand+0x1ea>
    24f6:	9e 8f       	std	Y+30, r25	; 0x1e
    24f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);

#elif(LCD_DATA_BITS == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, Command);
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	69 ad       	ldd	r22, Y+57	; 0x39
    24fe:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <GPIO_writePort>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a0 e8       	ldi	r26, 0x80	; 128
    2508:	bf e3       	ldi	r27, 0x3F	; 63
    250a:	89 8f       	std	Y+25, r24	; 0x19
    250c:	9a 8f       	std	Y+26, r25	; 0x1a
    250e:	ab 8f       	std	Y+27, r26	; 0x1b
    2510:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2512:	69 8d       	ldd	r22, Y+25	; 0x19
    2514:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2516:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2518:	9c 8d       	ldd	r25, Y+28	; 0x1c
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	4a ef       	ldi	r20, 0xFA	; 250
    2520:	54 e4       	ldi	r21, 0x44	; 68
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	8d 8b       	std	Y+21, r24	; 0x15
    252c:	9e 8b       	std	Y+22, r25	; 0x16
    252e:	af 8b       	std	Y+23, r26	; 0x17
    2530:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2532:	6d 89       	ldd	r22, Y+21	; 0x15
    2534:	7e 89       	ldd	r23, Y+22	; 0x16
    2536:	8f 89       	ldd	r24, Y+23	; 0x17
    2538:	98 8d       	ldd	r25, Y+24	; 0x18
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	5f e3       	ldi	r21, 0x3F	; 63
    2542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2546:	88 23       	and	r24, r24
    2548:	2c f4       	brge	.+10     	; 0x2554 <LCD_sendCommand+0x24c>
		__ticks = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	9c 8b       	std	Y+20, r25	; 0x14
    2550:	8b 8b       	std	Y+19, r24	; 0x13
    2552:	3f c0       	rjmp	.+126    	; 0x25d2 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2554:	6d 89       	ldd	r22, Y+21	; 0x15
    2556:	7e 89       	ldd	r23, Y+22	; 0x16
    2558:	8f 89       	ldd	r24, Y+23	; 0x17
    255a:	98 8d       	ldd	r25, Y+24	; 0x18
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	3f ef       	ldi	r19, 0xFF	; 255
    2560:	4f e7       	ldi	r20, 0x7F	; 127
    2562:	57 e4       	ldi	r21, 0x47	; 71
    2564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2568:	18 16       	cp	r1, r24
    256a:	4c f5       	brge	.+82     	; 0x25be <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256c:	69 8d       	ldd	r22, Y+25	; 0x19
    256e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e2       	ldi	r20, 0x20	; 32
    257a:	51 e4       	ldi	r21, 0x41	; 65
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9c 8b       	std	Y+20, r25	; 0x14
    2592:	8b 8b       	std	Y+19, r24	; 0x13
    2594:	0f c0       	rjmp	.+30     	; 0x25b4 <LCD_sendCommand+0x2ac>
    2596:	88 ec       	ldi	r24, 0xC8	; 200
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9a 8b       	std	Y+18, r25	; 0x12
    259c:	89 8b       	std	Y+17, r24	; 0x11
    259e:	89 89       	ldd	r24, Y+17	; 0x11
    25a0:	9a 89       	ldd	r25, Y+18	; 0x12
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <LCD_sendCommand+0x29a>
    25a6:	9a 8b       	std	Y+18, r25	; 0x12
    25a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25aa:	8b 89       	ldd	r24, Y+19	; 0x13
    25ac:	9c 89       	ldd	r25, Y+20	; 0x14
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	9c 8b       	std	Y+20, r25	; 0x14
    25b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b4:	8b 89       	ldd	r24, Y+19	; 0x13
    25b6:	9c 89       	ldd	r25, Y+20	; 0x14
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	69 f7       	brne	.-38     	; 0x2596 <LCD_sendCommand+0x28e>
    25bc:	14 c0       	rjmp	.+40     	; 0x25e6 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25be:	6d 89       	ldd	r22, Y+21	; 0x15
    25c0:	7e 89       	ldd	r23, Y+22	; 0x16
    25c2:	8f 89       	ldd	r24, Y+23	; 0x17
    25c4:	98 8d       	ldd	r25, Y+24	; 0x18
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	9c 8b       	std	Y+20, r25	; 0x14
    25d0:	8b 8b       	std	Y+19, r24	; 0x13
    25d2:	8b 89       	ldd	r24, Y+19	; 0x13
    25d4:	9c 89       	ldd	r25, Y+20	; 0x14
    25d6:	98 8b       	std	Y+16, r25	; 0x10
    25d8:	8f 87       	std	Y+15, r24	; 0x0f
    25da:	8f 85       	ldd	r24, Y+15	; 0x0f
    25dc:	98 89       	ldd	r25, Y+16	; 0x10
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <LCD_sendCommand+0x2d6>
    25e2:	98 8b       	std	Y+16, r25	; 0x10
    25e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_LOW);
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	61 e0       	ldi	r22, 0x01	; 1
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <GPIO_writePin>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a0 e8       	ldi	r26, 0x80	; 128
    25f6:	bf e3       	ldi	r27, 0x3F	; 63
    25f8:	8b 87       	std	Y+11, r24	; 0x0b
    25fa:	9c 87       	std	Y+12, r25	; 0x0c
    25fc:	ad 87       	std	Y+13, r26	; 0x0d
    25fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2600:	6b 85       	ldd	r22, Y+11	; 0x0b
    2602:	7c 85       	ldd	r23, Y+12	; 0x0c
    2604:	8d 85       	ldd	r24, Y+13	; 0x0d
    2606:	9e 85       	ldd	r25, Y+14	; 0x0e
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	4a ef       	ldi	r20, 0xFA	; 250
    260e:	54 e4       	ldi	r21, 0x44	; 68
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	8f 83       	std	Y+7, r24	; 0x07
    261a:	98 87       	std	Y+8, r25	; 0x08
    261c:	a9 87       	std	Y+9, r26	; 0x09
    261e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2620:	6f 81       	ldd	r22, Y+7	; 0x07
    2622:	78 85       	ldd	r23, Y+8	; 0x08
    2624:	89 85       	ldd	r24, Y+9	; 0x09
    2626:	9a 85       	ldd	r25, Y+10	; 0x0a
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2634:	88 23       	and	r24, r24
    2636:	2c f4       	brge	.+10     	; 0x2642 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9e 83       	std	Y+6, r25	; 0x06
    263e:	8d 83       	std	Y+5, r24	; 0x05
    2640:	3f c0       	rjmp	.+126    	; 0x26c0 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	3f ef       	ldi	r19, 0xFF	; 255
    264e:	4f e7       	ldi	r20, 0x7F	; 127
    2650:	57 e4       	ldi	r21, 0x47	; 71
    2652:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2656:	18 16       	cp	r1, r24
    2658:	4c f5       	brge	.+82     	; 0x26ac <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265a:	6b 85       	ldd	r22, Y+11	; 0x0b
    265c:	7c 85       	ldd	r23, Y+12	; 0x0c
    265e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2660:	9e 85       	ldd	r25, Y+14	; 0x0e
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	51 e4       	ldi	r21, 0x41	; 65
    266a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
    2682:	0f c0       	rjmp	.+30     	; 0x26a2 <LCD_sendCommand+0x39a>
    2684:	88 ec       	ldi	r24, 0xC8	; 200
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9c 83       	std	Y+4, r25	; 0x04
    268a:	8b 83       	std	Y+3, r24	; 0x03
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_sendCommand+0x388>
    2694:	9c 83       	std	Y+4, r25	; 0x04
    2696:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	9e 81       	ldd	r25, Y+6	; 0x06
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	69 f7       	brne	.-38     	; 0x2684 <LCD_sendCommand+0x37c>
    26aa:	14 c0       	rjmp	.+40     	; 0x26d4 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ac:	6f 81       	ldd	r22, Y+7	; 0x07
    26ae:	78 85       	ldd	r23, Y+8	; 0x08
    26b0:	89 85       	ldd	r24, Y+9	; 0x09
    26b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <LCD_sendCommand+0x3c4>
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    26d4:	e9 96       	adiw	r28, 0x39	; 57
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 Data)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	e9 97       	sbiw	r28, 0x39	; 57
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(RS_PORT_ID,RS_PIN_ID,LOGIC_HIGH);
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	41 e0       	ldi	r20, 0x01	; 1
    2702:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <GPIO_writePin>
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	a0 e8       	ldi	r26, 0x80	; 128
    270c:	bf e3       	ldi	r27, 0x3F	; 63
    270e:	8d ab       	std	Y+53, r24	; 0x35
    2710:	9e ab       	std	Y+54, r25	; 0x36
    2712:	af ab       	std	Y+55, r26	; 0x37
    2714:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2716:	6d a9       	ldd	r22, Y+53	; 0x35
    2718:	7e a9       	ldd	r23, Y+54	; 0x36
    271a:	8f a9       	ldd	r24, Y+55	; 0x37
    271c:	98 ad       	ldd	r25, Y+56	; 0x38
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	4a ef       	ldi	r20, 0xFA	; 250
    2724:	54 e4       	ldi	r21, 0x44	; 68
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	89 ab       	std	Y+49, r24	; 0x31
    2730:	9a ab       	std	Y+50, r25	; 0x32
    2732:	ab ab       	std	Y+51, r26	; 0x33
    2734:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2736:	69 a9       	ldd	r22, Y+49	; 0x31
    2738:	7a a9       	ldd	r23, Y+50	; 0x32
    273a:	8b a9       	ldd	r24, Y+51	; 0x33
    273c:	9c a9       	ldd	r25, Y+52	; 0x34
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e8       	ldi	r20, 0x80	; 128
    2744:	5f e3       	ldi	r21, 0x3F	; 63
    2746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274a:	88 23       	and	r24, r24
    274c:	2c f4       	brge	.+10     	; 0x2758 <LCD_displayCharacter+0x72>
		__ticks = 1;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	98 ab       	std	Y+48, r25	; 0x30
    2754:	8f a7       	std	Y+47, r24	; 0x2f
    2756:	3f c0       	rjmp	.+126    	; 0x27d6 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2758:	69 a9       	ldd	r22, Y+49	; 0x31
    275a:	7a a9       	ldd	r23, Y+50	; 0x32
    275c:	8b a9       	ldd	r24, Y+51	; 0x33
    275e:	9c a9       	ldd	r25, Y+52	; 0x34
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	3f ef       	ldi	r19, 0xFF	; 255
    2764:	4f e7       	ldi	r20, 0x7F	; 127
    2766:	57 e4       	ldi	r21, 0x47	; 71
    2768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276c:	18 16       	cp	r1, r24
    276e:	4c f5       	brge	.+82     	; 0x27c2 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2770:	6d a9       	ldd	r22, Y+53	; 0x35
    2772:	7e a9       	ldd	r23, Y+54	; 0x36
    2774:	8f a9       	ldd	r24, Y+55	; 0x37
    2776:	98 ad       	ldd	r25, Y+56	; 0x38
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e2       	ldi	r20, 0x20	; 32
    277e:	51 e4       	ldi	r21, 0x41	; 65
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	bc 01       	movw	r22, r24
    278a:	cd 01       	movw	r24, r26
    278c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	98 ab       	std	Y+48, r25	; 0x30
    2796:	8f a7       	std	Y+47, r24	; 0x2f
    2798:	0f c0       	rjmp	.+30     	; 0x27b8 <LCD_displayCharacter+0xd2>
    279a:	88 ec       	ldi	r24, 0xC8	; 200
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	9e a7       	std	Y+46, r25	; 0x2e
    27a0:	8d a7       	std	Y+45, r24	; 0x2d
    27a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    27a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <LCD_displayCharacter+0xc0>
    27aa:	9e a7       	std	Y+46, r25	; 0x2e
    27ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    27b0:	98 a9       	ldd	r25, Y+48	; 0x30
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	98 ab       	std	Y+48, r25	; 0x30
    27b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ba:	98 a9       	ldd	r25, Y+48	; 0x30
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	69 f7       	brne	.-38     	; 0x279a <LCD_displayCharacter+0xb4>
    27c0:	14 c0       	rjmp	.+40     	; 0x27ea <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c2:	69 a9       	ldd	r22, Y+49	; 0x31
    27c4:	7a a9       	ldd	r23, Y+50	; 0x32
    27c6:	8b a9       	ldd	r24, Y+51	; 0x33
    27c8:	9c a9       	ldd	r25, Y+52	; 0x34
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	98 ab       	std	Y+48, r25	; 0x30
    27d4:	8f a7       	std	Y+47, r24	; 0x2f
    27d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d8:	98 a9       	ldd	r25, Y+48	; 0x30
    27da:	9c a7       	std	Y+44, r25	; 0x2c
    27dc:	8b a7       	std	Y+43, r24	; 0x2b
    27de:	8b a5       	ldd	r24, Y+43	; 0x2b
    27e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <LCD_displayCharacter+0xfc>
    27e6:	9c a7       	std	Y+44, r25	; 0x2c
    27e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_HIGH);
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	61 e0       	ldi	r22, 0x01	; 1
    27ee:	41 e0       	ldi	r20, 0x01	; 1
    27f0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <GPIO_writePin>
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e8       	ldi	r26, 0x80	; 128
    27fa:	bf e3       	ldi	r27, 0x3F	; 63
    27fc:	8f a3       	std	Y+39, r24	; 0x27
    27fe:	98 a7       	std	Y+40, r25	; 0x28
    2800:	a9 a7       	std	Y+41, r26	; 0x29
    2802:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2804:	6f a1       	ldd	r22, Y+39	; 0x27
    2806:	78 a5       	ldd	r23, Y+40	; 0x28
    2808:	89 a5       	ldd	r24, Y+41	; 0x29
    280a:	9a a5       	ldd	r25, Y+42	; 0x2a
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a ef       	ldi	r20, 0xFA	; 250
    2812:	54 e4       	ldi	r21, 0x44	; 68
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	8b a3       	std	Y+35, r24	; 0x23
    281e:	9c a3       	std	Y+36, r25	; 0x24
    2820:	ad a3       	std	Y+37, r26	; 0x25
    2822:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2824:	6b a1       	ldd	r22, Y+35	; 0x23
    2826:	7c a1       	ldd	r23, Y+36	; 0x24
    2828:	8d a1       	ldd	r24, Y+37	; 0x25
    282a:	9e a1       	ldd	r25, Y+38	; 0x26
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e8       	ldi	r20, 0x80	; 128
    2832:	5f e3       	ldi	r21, 0x3F	; 63
    2834:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2838:	88 23       	and	r24, r24
    283a:	2c f4       	brge	.+10     	; 0x2846 <LCD_displayCharacter+0x160>
		__ticks = 1;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9a a3       	std	Y+34, r25	; 0x22
    2842:	89 a3       	std	Y+33, r24	; 0x21
    2844:	3f c0       	rjmp	.+126    	; 0x28c4 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2846:	6b a1       	ldd	r22, Y+35	; 0x23
    2848:	7c a1       	ldd	r23, Y+36	; 0x24
    284a:	8d a1       	ldd	r24, Y+37	; 0x25
    284c:	9e a1       	ldd	r25, Y+38	; 0x26
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	3f ef       	ldi	r19, 0xFF	; 255
    2852:	4f e7       	ldi	r20, 0x7F	; 127
    2854:	57 e4       	ldi	r21, 0x47	; 71
    2856:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    285a:	18 16       	cp	r1, r24
    285c:	4c f5       	brge	.+82     	; 0x28b0 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285e:	6f a1       	ldd	r22, Y+39	; 0x27
    2860:	78 a5       	ldd	r23, Y+40	; 0x28
    2862:	89 a5       	ldd	r24, Y+41	; 0x29
    2864:	9a a5       	ldd	r25, Y+42	; 0x2a
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e2       	ldi	r20, 0x20	; 32
    286c:	51 e4       	ldi	r21, 0x41	; 65
    286e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	9a a3       	std	Y+34, r25	; 0x22
    2884:	89 a3       	std	Y+33, r24	; 0x21
    2886:	0f c0       	rjmp	.+30     	; 0x28a6 <LCD_displayCharacter+0x1c0>
    2888:	88 ec       	ldi	r24, 0xC8	; 200
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	98 a3       	std	Y+32, r25	; 0x20
    288e:	8f 8f       	std	Y+31, r24	; 0x1f
    2890:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2892:	98 a1       	ldd	r25, Y+32	; 0x20
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <LCD_displayCharacter+0x1ae>
    2898:	98 a3       	std	Y+32, r25	; 0x20
    289a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289c:	89 a1       	ldd	r24, Y+33	; 0x21
    289e:	9a a1       	ldd	r25, Y+34	; 0x22
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	9a a3       	std	Y+34, r25	; 0x22
    28a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a6:	89 a1       	ldd	r24, Y+33	; 0x21
    28a8:	9a a1       	ldd	r25, Y+34	; 0x22
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	69 f7       	brne	.-38     	; 0x2888 <LCD_displayCharacter+0x1a2>
    28ae:	14 c0       	rjmp	.+40     	; 0x28d8 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b0:	6b a1       	ldd	r22, Y+35	; 0x23
    28b2:	7c a1       	ldd	r23, Y+36	; 0x24
    28b4:	8d a1       	ldd	r24, Y+37	; 0x25
    28b6:	9e a1       	ldd	r25, Y+38	; 0x26
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	9a a3       	std	Y+34, r25	; 0x22
    28c2:	89 a3       	std	Y+33, r24	; 0x21
    28c4:	89 a1       	ldd	r24, Y+33	; 0x21
    28c6:	9a a1       	ldd	r25, Y+34	; 0x22
    28c8:	9e 8f       	std	Y+30, r25	; 0x1e
    28ca:	8d 8f       	std	Y+29, r24	; 0x1d
    28cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <LCD_displayCharacter+0x1ea>
    28d4:	9e 8f       	std	Y+30, r25	; 0x1e
    28d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if(LCD_DATA_BITS == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, Data);
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	69 ad       	ldd	r22, Y+57	; 0x39
    28dc:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <GPIO_writePort>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e8       	ldi	r26, 0x80	; 128
    28e6:	bf e3       	ldi	r27, 0x3F	; 63
    28e8:	89 8f       	std	Y+25, r24	; 0x19
    28ea:	9a 8f       	std	Y+26, r25	; 0x1a
    28ec:	ab 8f       	std	Y+27, r26	; 0x1b
    28ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f0:	69 8d       	ldd	r22, Y+25	; 0x19
    28f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	4a ef       	ldi	r20, 0xFA	; 250
    28fe:	54 e4       	ldi	r21, 0x44	; 68
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	8d 8b       	std	Y+21, r24	; 0x15
    290a:	9e 8b       	std	Y+22, r25	; 0x16
    290c:	af 8b       	std	Y+23, r26	; 0x17
    290e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2910:	6d 89       	ldd	r22, Y+21	; 0x15
    2912:	7e 89       	ldd	r23, Y+22	; 0x16
    2914:	8f 89       	ldd	r24, Y+23	; 0x17
    2916:	98 8d       	ldd	r25, Y+24	; 0x18
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e8       	ldi	r20, 0x80	; 128
    291e:	5f e3       	ldi	r21, 0x3F	; 63
    2920:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2924:	88 23       	and	r24, r24
    2926:	2c f4       	brge	.+10     	; 0x2932 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	9c 8b       	std	Y+20, r25	; 0x14
    292e:	8b 8b       	std	Y+19, r24	; 0x13
    2930:	3f c0       	rjmp	.+126    	; 0x29b0 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2932:	6d 89       	ldd	r22, Y+21	; 0x15
    2934:	7e 89       	ldd	r23, Y+22	; 0x16
    2936:	8f 89       	ldd	r24, Y+23	; 0x17
    2938:	98 8d       	ldd	r25, Y+24	; 0x18
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	4c f5       	brge	.+82     	; 0x299c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294a:	69 8d       	ldd	r22, Y+25	; 0x19
    294c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    294e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2950:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e2       	ldi	r20, 0x20	; 32
    2958:	51 e4       	ldi	r21, 0x41	; 65
    295a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9c 8b       	std	Y+20, r25	; 0x14
    2970:	8b 8b       	std	Y+19, r24	; 0x13
    2972:	0f c0       	rjmp	.+30     	; 0x2992 <LCD_displayCharacter+0x2ac>
    2974:	88 ec       	ldi	r24, 0xC8	; 200
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9a 8b       	std	Y+18, r25	; 0x12
    297a:	89 8b       	std	Y+17, r24	; 0x11
    297c:	89 89       	ldd	r24, Y+17	; 0x11
    297e:	9a 89       	ldd	r25, Y+18	; 0x12
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <LCD_displayCharacter+0x29a>
    2984:	9a 8b       	std	Y+18, r25	; 0x12
    2986:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2988:	8b 89       	ldd	r24, Y+19	; 0x13
    298a:	9c 89       	ldd	r25, Y+20	; 0x14
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	9c 8b       	std	Y+20, r25	; 0x14
    2990:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2992:	8b 89       	ldd	r24, Y+19	; 0x13
    2994:	9c 89       	ldd	r25, Y+20	; 0x14
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	69 f7       	brne	.-38     	; 0x2974 <LCD_displayCharacter+0x28e>
    299a:	14 c0       	rjmp	.+40     	; 0x29c4 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299c:	6d 89       	ldd	r22, Y+21	; 0x15
    299e:	7e 89       	ldd	r23, Y+22	; 0x16
    29a0:	8f 89       	ldd	r24, Y+23	; 0x17
    29a2:	98 8d       	ldd	r25, Y+24	; 0x18
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9c 8b       	std	Y+20, r25	; 0x14
    29ae:	8b 8b       	std	Y+19, r24	; 0x13
    29b0:	8b 89       	ldd	r24, Y+19	; 0x13
    29b2:	9c 89       	ldd	r25, Y+20	; 0x14
    29b4:	98 8b       	std	Y+16, r25	; 0x10
    29b6:	8f 87       	std	Y+15, r24	; 0x0f
    29b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ba:	98 89       	ldd	r25, Y+16	; 0x10
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <LCD_displayCharacter+0x2d6>
    29c0:	98 8b       	std	Y+16, r25	; 0x10
    29c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_LOW);
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	61 e0       	ldi	r22, 0x01	; 1
    29c8:	40 e0       	ldi	r20, 0x00	; 0
    29ca:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <GPIO_writePin>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	a0 e8       	ldi	r26, 0x80	; 128
    29d4:	bf e3       	ldi	r27, 0x3F	; 63
    29d6:	8b 87       	std	Y+11, r24	; 0x0b
    29d8:	9c 87       	std	Y+12, r25	; 0x0c
    29da:	ad 87       	std	Y+13, r26	; 0x0d
    29dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29de:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	4a ef       	ldi	r20, 0xFA	; 250
    29ec:	54 e4       	ldi	r21, 0x44	; 68
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	8f 83       	std	Y+7, r24	; 0x07
    29f8:	98 87       	std	Y+8, r25	; 0x08
    29fa:	a9 87       	std	Y+9, r26	; 0x09
    29fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2a00:	78 85       	ldd	r23, Y+8	; 0x08
    2a02:	89 85       	ldd	r24, Y+9	; 0x09
    2a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e8       	ldi	r20, 0x80	; 128
    2a0c:	5f e3       	ldi	r21, 0x3F	; 63
    2a0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a12:	88 23       	and	r24, r24
    2a14:	2c f4       	brge	.+10     	; 0x2a20 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
    2a1e:	3f c0       	rjmp	.+126    	; 0x2a9e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	3f ef       	ldi	r19, 0xFF	; 255
    2a2c:	4f e7       	ldi	r20, 0x7F	; 127
    2a2e:	57 e4       	ldi	r21, 0x47	; 71
    2a30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a34:	18 16       	cp	r1, r24
    2a36:	4c f5       	brge	.+82     	; 0x2a8a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e2       	ldi	r20, 0x20	; 32
    2a46:	51 e4       	ldi	r21, 0x41	; 65
    2a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	bc 01       	movw	r22, r24
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9e 83       	std	Y+6, r25	; 0x06
    2a5e:	8d 83       	std	Y+5, r24	; 0x05
    2a60:	0f c0       	rjmp	.+30     	; 0x2a80 <LCD_displayCharacter+0x39a>
    2a62:	88 ec       	ldi	r24, 0xC8	; 200
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	9c 83       	std	Y+4, r25	; 0x04
    2a68:	8b 83       	std	Y+3, r24	; 0x03
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <LCD_displayCharacter+0x388>
    2a72:	9c 83       	std	Y+4, r25	; 0x04
    2a74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	9e 81       	ldd	r25, Y+6	; 0x06
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	69 f7       	brne	.-38     	; 0x2a62 <LCD_displayCharacter+0x37c>
    2a88:	14 c0       	rjmp	.+40     	; 0x2ab2 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8c:	78 85       	ldd	r23, Y+8	; 0x08
    2a8e:	89 85       	ldd	r24, Y+9	; 0x09
    2a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9e 83       	std	Y+6, r25	; 0x06
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
    2a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa2:	9a 83       	std	Y+2, r25	; 0x02
    2aa4:	89 83       	std	Y+1, r24	; 0x01
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <LCD_displayCharacter+0x3c4>
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#endif
}
    2ab2:	e9 96       	adiw	r28, 0x39	; 57
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <LCD_displayString>:



void LCD_displayString(const char * Str){
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <LCD_displayString+0x6>
    2aca:	0f 92       	push	r0
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	9b 83       	std	Y+3, r25	; 0x03
    2ad2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2ad4:	19 82       	std	Y+1, r1	; 0x01
    2ad6:	0e c0       	rjmp	.+28     	; 0x2af4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	e2 0f       	add	r30, r18
    2ae6:	f3 1f       	adc	r31, r19
    2ae8:	80 81       	ld	r24, Z
    2aea:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_displayCharacter>
		i++;
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	8f 5f       	subi	r24, 0xFF	; 255
    2af2:	89 83       	std	Y+1, r24	; 0x01



void LCD_displayString(const char * Str){
	uint8 i=0;
	while(Str[i] != '\0')
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	9b 81       	ldd	r25, Y+3	; 0x03
    2afe:	fc 01       	movw	r30, r24
    2b00:	e2 0f       	add	r30, r18
    2b02:	f3 1f       	adc	r31, r19
    2b04:	80 81       	ld	r24, Z
    2b06:	88 23       	and	r24, r24
    2b08:	39 f7       	brne	.-50     	; 0x2ad8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col){
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <LCD_moveCursor+0x6>
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <LCD_moveCursor+0x8>
    2b1e:	0f 92       	push	r0
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	8a 83       	std	Y+2, r24	; 0x02
    2b26:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	28 2f       	mov	r18, r24
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	3d 83       	std	Y+5, r19	; 0x05
    2b30:	2c 83       	std	Y+4, r18	; 0x04
    2b32:	8c 81       	ldd	r24, Y+4	; 0x04
    2b34:	9d 81       	ldd	r25, Y+5	; 0x05
    2b36:	81 30       	cpi	r24, 0x01	; 1
    2b38:	91 05       	cpc	r25, r1
    2b3a:	c1 f0       	breq	.+48     	; 0x2b6c <LCD_moveCursor+0x56>
    2b3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b40:	22 30       	cpi	r18, 0x02	; 2
    2b42:	31 05       	cpc	r19, r1
    2b44:	2c f4       	brge	.+10     	; 0x2b50 <LCD_moveCursor+0x3a>
    2b46:	8c 81       	ldd	r24, Y+4	; 0x04
    2b48:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	61 f0       	breq	.+24     	; 0x2b66 <LCD_moveCursor+0x50>
    2b4e:	19 c0       	rjmp	.+50     	; 0x2b82 <LCD_moveCursor+0x6c>
    2b50:	2c 81       	ldd	r18, Y+4	; 0x04
    2b52:	3d 81       	ldd	r19, Y+5	; 0x05
    2b54:	22 30       	cpi	r18, 0x02	; 2
    2b56:	31 05       	cpc	r19, r1
    2b58:	69 f0       	breq	.+26     	; 0x2b74 <LCD_moveCursor+0x5e>
    2b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b5e:	83 30       	cpi	r24, 0x03	; 3
    2b60:	91 05       	cpc	r25, r1
    2b62:	61 f0       	breq	.+24     	; 0x2b7c <LCD_moveCursor+0x66>
    2b64:	0e c0       	rjmp	.+28     	; 0x2b82 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	0b c0       	rjmp	.+22     	; 0x2b82 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	80 5c       	subi	r24, 0xC0	; 192
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	07 c0       	rjmp	.+14     	; 0x2b82 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	80 5f       	subi	r24, 0xF0	; 240
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	03 c0       	rjmp	.+6      	; 0x2b82 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	80 5b       	subi	r24, 0xB0	; 176
    2b80:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(lcd_memory_address | 0x80);
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	80 68       	ori	r24, 0x80	; 128
    2b86:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_sendCommand>
}
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	08 95       	ret

00002b9a <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	00 d0       	rcall	.+0      	; 0x2ba0 <LCD_displayStringRowColumn+0x6>
    2ba0:	00 d0       	rcall	.+0      	; 0x2ba2 <LCD_displayStringRowColumn+0x8>
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	6a 83       	std	Y+2, r22	; 0x02
    2baa:	5c 83       	std	Y+4, r21	; 0x04
    2bac:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	6a 81       	ldd	r22, Y+2	; 0x02
    2bb2:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <LCD_moveCursor>
	LCD_displayString(Str);
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bba:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <LCD_displayString>
}
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <LCD_integerToString>:
void LCD_integerToString(int data){
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	62 97       	sbiw	r28, 0x12	; 18
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	f8 94       	cli
    2bda:	de bf       	out	0x3e, r29	; 62
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	cd bf       	out	0x3d, r28	; 61
    2be0:	9a 8b       	std	Y+18, r25	; 0x12
    2be2:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(data,buffer,10);
    2be4:	89 89       	ldd	r24, Y+17	; 0x11
    2be6:	9a 89       	ldd	r25, Y+18	; 0x12
    2be8:	9e 01       	movw	r18, r28
    2bea:	2f 5f       	subi	r18, 0xFF	; 255
    2bec:	3f 4f       	sbci	r19, 0xFF	; 255
    2bee:	b9 01       	movw	r22, r18
    2bf0:	4a e0       	ldi	r20, 0x0A	; 10
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <itoa>
	LCD_displayString(buffer);
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	01 96       	adiw	r24, 0x01	; 1
    2bfc:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <LCD_displayString>
}
    2c00:	62 96       	adiw	r28, 0x12	; 18
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	cd bf       	out	0x3d, r28	; 61
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <LCD_clearScreen>:
void LCD_clearScreen(void){
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_sendCommand>
}
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <__vector_9>:
#include"common_macros.h"
#include<avr/interrupt.h>

static volatile void(*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_OVF_vect){
    2c26:	1f 92       	push	r1
    2c28:	0f 92       	push	r0
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	0f 92       	push	r0
    2c2e:	11 24       	eor	r1, r1
    2c30:	2f 93       	push	r18
    2c32:	3f 93       	push	r19
    2c34:	4f 93       	push	r20
    2c36:	5f 93       	push	r21
    2c38:	6f 93       	push	r22
    2c3a:	7f 93       	push	r23
    2c3c:	8f 93       	push	r24
    2c3e:	9f 93       	push	r25
    2c40:	af 93       	push	r26
    2c42:	bf 93       	push	r27
    2c44:	ef 93       	push	r30
    2c46:	ff 93       	push	r31
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR){
    2c50:	80 91 83 00 	lds	r24, 0x0083
    2c54:	90 91 84 00 	lds	r25, 0x0084
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	29 f0       	breq	.+10     	; 0x2c66 <__vector_9+0x40>
		(*g_callBackPtr)();
    2c5c:	e0 91 83 00 	lds	r30, 0x0083
    2c60:	f0 91 84 00 	lds	r31, 0x0084
    2c64:	09 95       	icall
	}
}
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	ff 91       	pop	r31
    2c6c:	ef 91       	pop	r30
    2c6e:	bf 91       	pop	r27
    2c70:	af 91       	pop	r26
    2c72:	9f 91       	pop	r25
    2c74:	8f 91       	pop	r24
    2c76:	7f 91       	pop	r23
    2c78:	6f 91       	pop	r22
    2c7a:	5f 91       	pop	r21
    2c7c:	4f 91       	pop	r20
    2c7e:	3f 91       	pop	r19
    2c80:	2f 91       	pop	r18
    2c82:	0f 90       	pop	r0
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	0f 90       	pop	r0
    2c88:	1f 90       	pop	r1
    2c8a:	18 95       	reti

00002c8c <__vector_7>:

ISR(TIMER1_COMPA_vect){
    2c8c:	1f 92       	push	r1
    2c8e:	0f 92       	push	r0
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	0f 92       	push	r0
    2c94:	11 24       	eor	r1, r1
    2c96:	2f 93       	push	r18
    2c98:	3f 93       	push	r19
    2c9a:	4f 93       	push	r20
    2c9c:	5f 93       	push	r21
    2c9e:	6f 93       	push	r22
    2ca0:	7f 93       	push	r23
    2ca2:	8f 93       	push	r24
    2ca4:	9f 93       	push	r25
    2ca6:	af 93       	push	r26
    2ca8:	bf 93       	push	r27
    2caa:	ef 93       	push	r30
    2cac:	ff 93       	push	r31
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR){
    2cb6:	80 91 83 00 	lds	r24, 0x0083
    2cba:	90 91 84 00 	lds	r25, 0x0084
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	29 f0       	breq	.+10     	; 0x2ccc <__vector_7+0x40>
		(*g_callBackPtr)();
    2cc2:	e0 91 83 00 	lds	r30, 0x0083
    2cc6:	f0 91 84 00 	lds	r31, 0x0084
    2cca:	09 95       	icall
	}
}
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	ff 91       	pop	r31
    2cd2:	ef 91       	pop	r30
    2cd4:	bf 91       	pop	r27
    2cd6:	af 91       	pop	r26
    2cd8:	9f 91       	pop	r25
    2cda:	8f 91       	pop	r24
    2cdc:	7f 91       	pop	r23
    2cde:	6f 91       	pop	r22
    2ce0:	5f 91       	pop	r21
    2ce2:	4f 91       	pop	r20
    2ce4:	3f 91       	pop	r19
    2ce6:	2f 91       	pop	r18
    2ce8:	0f 90       	pop	r0
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	0f 90       	pop	r0
    2cee:	1f 90       	pop	r1
    2cf0:	18 95       	reti

00002cf2 <Timer1_init>:

void Timer1_init(const Timer1_Config *config_ptr){
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <Timer1_init+0x6>
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	9a 83       	std	Y+2, r25	; 0x02
    2cfe:	89 83       	std	Y+1, r24	; 0x01
	/*similar initialization steps in both CTC and normal modes*/
	SET_BIT(TCCR1A,FOC1A); /*non pwm mode*/
    2d00:	af e4       	ldi	r26, 0x4F	; 79
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	ef e4       	ldi	r30, 0x4F	; 79
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 60       	ori	r24, 0x08	; 8
    2d0c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B); /*non pwm mode*/
    2d0e:	af e4       	ldi	r26, 0x4F	; 79
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	ef e4       	ldi	r30, 0x4F	; 79
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	84 60       	ori	r24, 0x04	; 4
    2d1a:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B&(0xF7)) | (config_ptr->prescaler);
    2d1c:	ae e4       	ldi	r26, 0x4E	; 78
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	ee e4       	ldi	r30, 0x4E	; 78
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	98 2f       	mov	r25, r24
    2d28:	97 7f       	andi	r25, 0xF7	; 247
    2d2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d2e:	84 81       	ldd	r24, Z+4	; 0x04
    2d30:	89 2b       	or	r24, r25
    2d32:	8c 93       	st	X, r24
	TCNT1 = config_ptr->initial_value;
    2d34:	ac e4       	ldi	r26, 0x4C	; 76
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
    2d40:	11 96       	adiw	r26, 0x01	; 1
    2d42:	9c 93       	st	X, r25
    2d44:	8e 93       	st	-X, r24

	/*different initialization steps*/
	if(config_ptr->mode == NORMAL){
    2d46:	e9 81       	ldd	r30, Y+1	; 0x01
    2d48:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4a:	85 81       	ldd	r24, Z+5	; 0x05
    2d4c:	88 23       	and	r24, r24
    2d4e:	39 f4       	brne	.+14     	; 0x2d5e <Timer1_init+0x6c>
		SET_BIT(TIMSK,TOIE1);
    2d50:	a9 e5       	ldi	r26, 0x59	; 89
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	e9 e5       	ldi	r30, 0x59	; 89
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	84 60       	ori	r24, 0x04	; 4
    2d5c:	8c 93       	st	X, r24
	}
	if(config_ptr->mode == CTC){
    2d5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d60:	fa 81       	ldd	r31, Y+2	; 0x02
    2d62:	85 81       	ldd	r24, Z+5	; 0x05
    2d64:	84 30       	cpi	r24, 0x04	; 4
    2d66:	81 f4       	brne	.+32     	; 0x2d88 <Timer1_init+0x96>
		OCR1A =config_ptr->compare_value;
    2d68:	aa e4       	ldi	r26, 0x4A	; 74
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d70:	82 81       	ldd	r24, Z+2	; 0x02
    2d72:	93 81       	ldd	r25, Z+3	; 0x03
    2d74:	11 96       	adiw	r26, 0x01	; 1
    2d76:	9c 93       	st	X, r25
    2d78:	8e 93       	st	-X, r24
		SET_BIT(TIMSK,OCIE1A);
    2d7a:	a9 e5       	ldi	r26, 0x59	; 89
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e9 e5       	ldi	r30, 0x59	; 89
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	80 61       	ori	r24, 0x10	; 16
    2d86:	8c 93       	st	X, r24
	}
}
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <Timer1_deInit>:

void Timer1_deInit(void){
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    2d9a:	ec e4       	ldi	r30, 0x4C	; 76
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	11 82       	std	Z+1, r1	; 0x01
    2da0:	10 82       	st	Z, r1
	TCCR1A=0;
    2da2:	ef e4       	ldi	r30, 0x4F	; 79
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	10 82       	st	Z, r1
	TCCR1B=0;
    2da8:	ee e4       	ldi	r30, 0x4E	; 78
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	10 82       	st	Z, r1
	TIMSK=0;
    2dae:	e9 e5       	ldi	r30, 0x59	; 89
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	10 82       	st	Z, r1
	OCR1A=0;
    2db4:	ea e4       	ldi	r30, 0x4A	; 74
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	11 82       	std	Z+1, r1	; 0x01
    2dba:	10 82       	st	Z, r1
}
    2dbc:	cf 91       	pop	r28
    2dbe:	df 91       	pop	r29
    2dc0:	08 95       	ret

00002dc2 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <Timer1_setCallBack+0x6>
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
    2dcc:	9a 83       	std	Y+2, r25	; 0x02
    2dce:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd4:	90 93 84 00 	sts	0x0084, r25
    2dd8:	80 93 83 00 	sts	0x0083, r24
}
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <UART_init>:
#include"common_macros.h"
#include<avr/io.h>
#include "uart.h"

void UART_init(const uart_config *UART_Config_Ptr){
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <UART_init+0x6>
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <UART_init+0x8>
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	9c 83       	std	Y+4, r25	; 0x04
    2df4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRR_value =0;
    2df6:	1a 82       	std	Y+2, r1	; 0x02
    2df8:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCSRA,U2X);
    2dfa:	ab e2       	ldi	r26, 0x2B	; 43
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	eb e2       	ldi	r30, 0x2B	; 43
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	82 60       	ori	r24, 0x02	; 2
    2e06:	8c 93       	st	X, r24
	/*disable interrupts and enable receiver and transmitter*/
	UCSRB |= ((1<<4) | ((1<<3) & (~(1<<7)) & (~(1<<6)) & (~(1<<5))));
    2e08:	aa e2       	ldi	r26, 0x2A	; 42
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ea e2       	ldi	r30, 0x2A	; 42
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	88 61       	ori	r24, 0x18	; 24
    2e14:	8c 93       	st	X, r24
	SET_BIT(UCSRC,URSEL);
    2e16:	a0 e4       	ldi	r26, 0x40	; 64
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	e0 e4       	ldi	r30, 0x40	; 64
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	80 68       	ori	r24, 0x80	; 128
    2e22:	8c 93       	st	X, r24
	/*select asynchronous mode*/
	CLEAR_BIT(UCSRC,UMSEL);
    2e24:	a0 e4       	ldi	r26, 0x40	; 64
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	e0 e4       	ldi	r30, 0x40	; 64
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	8f 7b       	andi	r24, 0xBF	; 191
    2e30:	8c 93       	st	X, r24
	UCSRC = (UCSRC&(0xCF)) | ((UART_Config_Ptr->paritybit)<<4);
    2e32:	a0 e4       	ldi	r26, 0x40	; 64
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	e0 e4       	ldi	r30, 0x40	; 64
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	2f 7c       	andi	r18, 0xCF	; 207
    2e40:	eb 81       	ldd	r30, Y+3	; 0x03
    2e42:	fc 81       	ldd	r31, Y+4	; 0x04
    2e44:	84 81       	ldd	r24, Z+4	; 0x04
    2e46:	88 2f       	mov	r24, r24
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	82 95       	swap	r24
    2e4c:	92 95       	swap	r25
    2e4e:	90 7f       	andi	r25, 0xF0	; 240
    2e50:	98 27       	eor	r25, r24
    2e52:	80 7f       	andi	r24, 0xF0	; 240
    2e54:	98 27       	eor	r25, r24
    2e56:	82 2b       	or	r24, r18
    2e58:	8c 93       	st	X, r24
	UCSRC = (UCSRC&(0xF7)) | ((UART_Config_Ptr->stopbit)<<3);
    2e5a:	a0 e4       	ldi	r26, 0x40	; 64
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	e0 e4       	ldi	r30, 0x40	; 64
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	28 2f       	mov	r18, r24
    2e66:	27 7f       	andi	r18, 0xF7	; 247
    2e68:	eb 81       	ldd	r30, Y+3	; 0x03
    2e6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e6c:	85 81       	ldd	r24, Z+5	; 0x05
    2e6e:	88 2f       	mov	r24, r24
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	82 2b       	or	r24, r18
    2e80:	8c 93       	st	X, r24
	UCSRB = (UCSRB&(0xFB)) | (((UART_Config_Ptr->databits)<<2)& (0xFB));
    2e82:	aa e2       	ldi	r26, 0x2A	; 42
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	ea e2       	ldi	r30, 0x2A	; 42
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e90:	fc 81       	ldd	r31, Y+4	; 0x04
    2e92:	86 81       	ldd	r24, Z+6	; 0x06
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	88 0f       	add	r24, r24
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	82 2b       	or	r24, r18
    2ea2:	8b 7f       	andi	r24, 0xFB	; 251
    2ea4:	8c 93       	st	X, r24
	UCSRC = (UCSRC&(0xF9)) | (((UART_Config_Ptr->databits))&(0xF9));
    2ea6:	a0 e4       	ldi	r26, 0x40	; 64
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	e0 e4       	ldi	r30, 0x40	; 64
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	90 81       	ld	r25, Z
    2eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2eb4:	86 81       	ldd	r24, Z+6	; 0x06
    2eb6:	89 2b       	or	r24, r25
    2eb8:	89 7f       	andi	r24, 0xF9	; 249
    2eba:	8c 93       	st	X, r24
	UBRR_value = (uint16)(((F_CPU / (UART_Config_Ptr->baudrate * 8UL))) - 1);
    2ebc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ebe:	fc 81       	ldd	r31, Y+4	; 0x04
    2ec0:	80 81       	ld	r24, Z
    2ec2:	91 81       	ldd	r25, Z+1	; 0x01
    2ec4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ec6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	aa 1f       	adc	r26, r26
    2ece:	bb 1f       	adc	r27, r27
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	aa 1f       	adc	r26, r26
    2ed6:	bb 1f       	adc	r27, r27
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	aa 1f       	adc	r26, r26
    2ede:	bb 1f       	adc	r27, r27
    2ee0:	9c 01       	movw	r18, r24
    2ee2:	ad 01       	movw	r20, r26
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	92 e1       	ldi	r25, 0x12	; 18
    2ee8:	aa e7       	ldi	r26, 0x7A	; 122
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2ef4:	da 01       	movw	r26, r20
    2ef6:	c9 01       	movw	r24, r18
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	9a 83       	std	Y+2, r25	; 0x02
    2efc:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = UBRR_value>>8;
    2efe:	e0 e4       	ldi	r30, 0x40	; 64
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	9a 81       	ldd	r25, Y+2	; 0x02
    2f06:	89 2f       	mov	r24, r25
    2f08:	99 27       	eor	r25, r25
    2f0a:	80 83       	st	Z, r24
	UBRRL = UBRR_value;
    2f0c:	e9 e2       	ldi	r30, 0x29	; 41
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	80 83       	st	Z, r24
}
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	08 95       	ret

00002f22 <UART_sendByte>:

void UART_sendByte(const uint8 data){
    2f22:	df 93       	push	r29
    2f24:	cf 93       	push	r28
    2f26:	0f 92       	push	r0
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){
    2f2e:	eb e2       	ldi	r30, 0x2B	; 43
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	88 2f       	mov	r24, r24
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	80 72       	andi	r24, 0x20	; 32
    2f3a:	90 70       	andi	r25, 0x00	; 0
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	b9 f3       	breq	.-18     	; 0x2f2e <UART_sendByte+0xc>
		/*wait till data register empty flag is set*/
	}
	UDR=data;
    2f40:	ec e2       	ldi	r30, 0x2C	; 44
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	80 83       	st	Z, r24
}
    2f48:	0f 90       	pop	r0
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <UART_receiveByte>:

uint8 UART_receiveByte(void){
    2f50:	df 93       	push	r29
    2f52:	cf 93       	push	r28
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){
    2f58:	eb e2       	ldi	r30, 0x2B	; 43
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	88 23       	and	r24, r24
    2f60:	dc f7       	brge	.-10     	; 0x2f58 <UART_receiveByte+0x8>
		/*wait till receive complete flag is set*/
	}
	return UDR;
    2f62:	ec e2       	ldi	r30, 0x2C	; 44
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
}
    2f68:	cf 91       	pop	r28
    2f6a:	df 91       	pop	r29
    2f6c:	08 95       	ret

00002f6e <UART_sendString>:

void UART_sendString(const uint8 *Str){
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	00 d0       	rcall	.+0      	; 0x2f74 <UART_sendString+0x6>
    2f74:	0f 92       	push	r0
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	9b 83       	std	Y+3, r25	; 0x03
    2f7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f7e:	19 82       	std	Y+1, r1	; 0x01
    2f80:	0e c0       	rjmp	.+28     	; 0x2f9e <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	28 2f       	mov	r18, r24
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	e2 0f       	add	r30, r18
    2f90:	f3 1f       	adc	r31, r19
    2f92:	80 81       	ld	r24, Z
    2f94:	0e 94 91 17 	call	0x2f22	; 0x2f22 <UART_sendByte>
		i++;
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	8f 5f       	subi	r24, 0xFF	; 255
    2f9c:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_sendString(const uint8 *Str){
	uint8 i = 0;
	while(Str[i] != '\0')
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa8:	fc 01       	movw	r30, r24
    2faa:	e2 0f       	add	r30, r18
    2fac:	f3 1f       	adc	r31, r19
    2fae:	80 81       	ld	r24, Z
    2fb0:	88 23       	and	r24, r24
    2fb2:	39 f7       	brne	.-50     	; 0x2f82 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <UART_receiveString>:

void UART_receiveString(uint8 *Str){
    2fc0:	0f 93       	push	r16
    2fc2:	1f 93       	push	r17
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <UART_receiveString+0xa>
    2fca:	0f 92       	push	r0
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	9b 83       	std	Y+3, r25	; 0x03
    2fd2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fd4:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte();
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
    2fd8:	28 2f       	mov	r18, r24
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fde:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe0:	8c 01       	movw	r16, r24
    2fe2:	02 0f       	add	r16, r18
    2fe4:	13 1f       	adc	r17, r19
    2fe6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <UART_receiveByte>
    2fea:	f8 01       	movw	r30, r16
    2fec:	80 83       	st	Z, r24
    2fee:	0f c0       	rjmp	.+30     	; 0x300e <UART_receiveString+0x4e>

	/* create new null which is '#'. receive string till '#" */
	while(Str[i] != '#')
	{
		i++;
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	8f 5f       	subi	r24, 0xFF	; 255
    2ff4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	28 2f       	mov	r18, r24
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    3000:	8c 01       	movw	r16, r24
    3002:	02 0f       	add	r16, r18
    3004:	13 1f       	adc	r17, r19
    3006:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <UART_receiveByte>
    300a:	f8 01       	movw	r30, r16
    300c:	80 83       	st	Z, r24
void UART_receiveString(uint8 *Str){
	uint8 i = 0;
	Str[i] = UART_receiveByte();

	/* create new null which is '#'. receive string till '#" */
	while(Str[i] != '#')
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	28 2f       	mov	r18, r24
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	8a 81       	ldd	r24, Y+2	; 0x02
    3016:	9b 81       	ldd	r25, Y+3	; 0x03
    3018:	fc 01       	movw	r30, r24
    301a:	e2 0f       	add	r30, r18
    301c:	f3 1f       	adc	r31, r19
    301e:	80 81       	ld	r24, Z
    3020:	83 32       	cpi	r24, 0x23	; 35
    3022:	31 f7       	brne	.-52     	; 0x2ff0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* replace the fake null '#' with real null '\0' so the string is in its normal format*/
	Str[i] = '\0';
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	28 2f       	mov	r18, r24
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	8a 81       	ldd	r24, Y+2	; 0x02
    302c:	9b 81       	ldd	r25, Y+3	; 0x03
    302e:	fc 01       	movw	r30, r24
    3030:	e2 0f       	add	r30, r18
    3032:	f3 1f       	adc	r31, r19
    3034:	10 82       	st	Z, r1
}
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	cf 91       	pop	r28
    303e:	df 91       	pop	r29
    3040:	1f 91       	pop	r17
    3042:	0f 91       	pop	r16
    3044:	08 95       	ret

00003046 <__udivmodsi4>:
    3046:	a1 e2       	ldi	r26, 0x21	; 33
    3048:	1a 2e       	mov	r1, r26
    304a:	aa 1b       	sub	r26, r26
    304c:	bb 1b       	sub	r27, r27
    304e:	fd 01       	movw	r30, r26
    3050:	0d c0       	rjmp	.+26     	; 0x306c <__udivmodsi4_ep>

00003052 <__udivmodsi4_loop>:
    3052:	aa 1f       	adc	r26, r26
    3054:	bb 1f       	adc	r27, r27
    3056:	ee 1f       	adc	r30, r30
    3058:	ff 1f       	adc	r31, r31
    305a:	a2 17       	cp	r26, r18
    305c:	b3 07       	cpc	r27, r19
    305e:	e4 07       	cpc	r30, r20
    3060:	f5 07       	cpc	r31, r21
    3062:	20 f0       	brcs	.+8      	; 0x306c <__udivmodsi4_ep>
    3064:	a2 1b       	sub	r26, r18
    3066:	b3 0b       	sbc	r27, r19
    3068:	e4 0b       	sbc	r30, r20
    306a:	f5 0b       	sbc	r31, r21

0000306c <__udivmodsi4_ep>:
    306c:	66 1f       	adc	r22, r22
    306e:	77 1f       	adc	r23, r23
    3070:	88 1f       	adc	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	1a 94       	dec	r1
    3076:	69 f7       	brne	.-38     	; 0x3052 <__udivmodsi4_loop>
    3078:	60 95       	com	r22
    307a:	70 95       	com	r23
    307c:	80 95       	com	r24
    307e:	90 95       	com	r25
    3080:	9b 01       	movw	r18, r22
    3082:	ac 01       	movw	r20, r24
    3084:	bd 01       	movw	r22, r26
    3086:	cf 01       	movw	r24, r30
    3088:	08 95       	ret

0000308a <__prologue_saves__>:
    308a:	2f 92       	push	r2
    308c:	3f 92       	push	r3
    308e:	4f 92       	push	r4
    3090:	5f 92       	push	r5
    3092:	6f 92       	push	r6
    3094:	7f 92       	push	r7
    3096:	8f 92       	push	r8
    3098:	9f 92       	push	r9
    309a:	af 92       	push	r10
    309c:	bf 92       	push	r11
    309e:	cf 92       	push	r12
    30a0:	df 92       	push	r13
    30a2:	ef 92       	push	r14
    30a4:	ff 92       	push	r15
    30a6:	0f 93       	push	r16
    30a8:	1f 93       	push	r17
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	ca 1b       	sub	r28, r26
    30b4:	db 0b       	sbc	r29, r27
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	09 94       	ijmp

000030c2 <__epilogue_restores__>:
    30c2:	2a 88       	ldd	r2, Y+18	; 0x12
    30c4:	39 88       	ldd	r3, Y+17	; 0x11
    30c6:	48 88       	ldd	r4, Y+16	; 0x10
    30c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    30ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    30cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    30ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    30d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    30d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    30d4:	b9 84       	ldd	r11, Y+9	; 0x09
    30d6:	c8 84       	ldd	r12, Y+8	; 0x08
    30d8:	df 80       	ldd	r13, Y+7	; 0x07
    30da:	ee 80       	ldd	r14, Y+6	; 0x06
    30dc:	fd 80       	ldd	r15, Y+5	; 0x05
    30de:	0c 81       	ldd	r16, Y+4	; 0x04
    30e0:	1b 81       	ldd	r17, Y+3	; 0x03
    30e2:	aa 81       	ldd	r26, Y+2	; 0x02
    30e4:	b9 81       	ldd	r27, Y+1	; 0x01
    30e6:	ce 0f       	add	r28, r30
    30e8:	d1 1d       	adc	r29, r1
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	ed 01       	movw	r28, r26
    30f6:	08 95       	ret

000030f8 <itoa>:
    30f8:	fb 01       	movw	r30, r22
    30fa:	9f 01       	movw	r18, r30
    30fc:	e8 94       	clt
    30fe:	42 30       	cpi	r20, 0x02	; 2
    3100:	c4 f0       	brlt	.+48     	; 0x3132 <itoa+0x3a>
    3102:	45 32       	cpi	r20, 0x25	; 37
    3104:	b4 f4       	brge	.+44     	; 0x3132 <itoa+0x3a>
    3106:	4a 30       	cpi	r20, 0x0A	; 10
    3108:	29 f4       	brne	.+10     	; 0x3114 <itoa+0x1c>
    310a:	97 fb       	bst	r25, 7
    310c:	1e f4       	brtc	.+6      	; 0x3114 <itoa+0x1c>
    310e:	90 95       	com	r25
    3110:	81 95       	neg	r24
    3112:	9f 4f       	sbci	r25, 0xFF	; 255
    3114:	64 2f       	mov	r22, r20
    3116:	77 27       	eor	r23, r23
    3118:	0e 94 ad 18 	call	0x315a	; 0x315a <__udivmodhi4>
    311c:	80 5d       	subi	r24, 0xD0	; 208
    311e:	8a 33       	cpi	r24, 0x3A	; 58
    3120:	0c f0       	brlt	.+2      	; 0x3124 <itoa+0x2c>
    3122:	89 5d       	subi	r24, 0xD9	; 217
    3124:	81 93       	st	Z+, r24
    3126:	cb 01       	movw	r24, r22
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	a1 f7       	brne	.-24     	; 0x3114 <itoa+0x1c>
    312c:	16 f4       	brtc	.+4      	; 0x3132 <itoa+0x3a>
    312e:	5d e2       	ldi	r21, 0x2D	; 45
    3130:	51 93       	st	Z+, r21
    3132:	10 82       	st	Z, r1
    3134:	c9 01       	movw	r24, r18
    3136:	0c 94 9d 18 	jmp	0x313a	; 0x313a <strrev>

0000313a <strrev>:
    313a:	dc 01       	movw	r26, r24
    313c:	fc 01       	movw	r30, r24
    313e:	67 2f       	mov	r22, r23
    3140:	71 91       	ld	r23, Z+
    3142:	77 23       	and	r23, r23
    3144:	e1 f7       	brne	.-8      	; 0x313e <strrev+0x4>
    3146:	32 97       	sbiw	r30, 0x02	; 2
    3148:	04 c0       	rjmp	.+8      	; 0x3152 <strrev+0x18>
    314a:	7c 91       	ld	r23, X
    314c:	6d 93       	st	X+, r22
    314e:	70 83       	st	Z, r23
    3150:	62 91       	ld	r22, -Z
    3152:	ae 17       	cp	r26, r30
    3154:	bf 07       	cpc	r27, r31
    3156:	c8 f3       	brcs	.-14     	; 0x314a <strrev+0x10>
    3158:	08 95       	ret

0000315a <__udivmodhi4>:
    315a:	aa 1b       	sub	r26, r26
    315c:	bb 1b       	sub	r27, r27
    315e:	51 e1       	ldi	r21, 0x11	; 17
    3160:	07 c0       	rjmp	.+14     	; 0x3170 <__udivmodhi4_ep>

00003162 <__udivmodhi4_loop>:
    3162:	aa 1f       	adc	r26, r26
    3164:	bb 1f       	adc	r27, r27
    3166:	a6 17       	cp	r26, r22
    3168:	b7 07       	cpc	r27, r23
    316a:	10 f0       	brcs	.+4      	; 0x3170 <__udivmodhi4_ep>
    316c:	a6 1b       	sub	r26, r22
    316e:	b7 0b       	sbc	r27, r23

00003170 <__udivmodhi4_ep>:
    3170:	88 1f       	adc	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	5a 95       	dec	r21
    3176:	a9 f7       	brne	.-22     	; 0x3162 <__udivmodhi4_loop>
    3178:	80 95       	com	r24
    317a:	90 95       	com	r25
    317c:	bc 01       	movw	r22, r24
    317e:	cd 01       	movw	r24, r26
    3180:	08 95       	ret

00003182 <_exit>:
    3182:	f8 94       	cli

00003184 <__stop_program>:
    3184:	ff cf       	rjmp	.-2      	; 0x3184 <__stop_program>
